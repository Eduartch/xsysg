*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="salidas.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmdaexcel AS commandbutton 		&& Enviar datos al excel
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "\\sistemas\optimus\fuentes\defines\optimus constants.h"
	*<DefinedPropArrayMethod>
		*m: enviardata		&& Permite manipular los datos y esta intimamente logada a la propiedad manejarenvió.
		*m: getset
		*m: ratsincaracter
		*m: setset
		*m: strzero
		*p: backcolorcabecera		&& Color de la cabecera
		*p: borders		&& Indica el estilo de los borders.
		*p: calias		&& alias de la tabla activa
		*p: cgriddata		&& Nombre del Grid vinculado a alos datos.
		*p: cmensaje		&& es la cadena que se presenta a la hora de la exportación de los datos al excel.
		*p: elaborado		&& Persona quien elabora el Cuadro.
		*p: empresa
		*p: forecolorcabecera		&& color de la letra de la cabecera
		*p: fuente		&& Nombre del Archivo o del Origen de los datos de donde se sacaron los datos.
		*p: grafico		&& Contiene el nombre del gráfico a adicionar.
		*p: letrasize		&& Tamaño de la Letra del Titulo
		*p: manejarenvio		&& Si se tiene varias tablas, y se quiere menejar la exportación de los datos al exel, se tiene que poner a true esta  propiedad y ver programar el método enviardata
		*p: ncolumnas		&& Nro de columnas de la última consulta.
		*p: nfilapie		&& Fila de Inicio de los datos
		*p: nfilatabla		&& determina a partir de que fila se comienza a ingresar los datos (estos incluye las cabeceras).
		*p: ogriddata		&& Vinculo al Objeto Grid a exportar.
		*p: oxls		&& Objeto que tiene la referencia al xls
		*p: solodatos		&& permite inhibir los datos de la suma, las lineas y el que elabora la fuentes.
		*p: titulo1
		*p: titulo2
		*p: variastablas		&& propiedad que permite indicar al excel que realize una exportación relacionada.
		*a: aexportar[1,4]		&& Array que contiene los campos que se desean exportar. 1campo, 2Nombre de la cabecera, 3 si quiere que se sume, 4 el formato solo cuando es númerico.
	*</DefinedPropArrayMethod>

	BackColor = 89,172,255
	backcolorcabecera = 14155776		&& Color de la cabecera
	borders = 1		&& Indica el estilo de los borders.
	calias = 		&& alias de la tabla activa
	Caption = "a \<Excel"
	cgriddata = 		&& Nombre del Grid vinculado a alos datos.
	cmensaje = Espere preparando los datos para enviarlos a Microsoft Excel		&& es la cadena que se presenta a la hora de la exportación de los datos al excel.
	elaborado = 		&& Persona quien elabora el Cuadro.
	empresa = 
	FontBold = .T.
	FontName = "Arial Unicode MS"
	FontSize = 8
	forecolorcabecera = 14211148		&& color de la letra de la cabecera
	fuente = 		&& Nombre del Archivo o del Origen de los datos de donde se sacaron los datos.
	grafico = 		&& Contiene el nombre del gráfico a adicionar.
	Height = 50
	letrasize = 14		&& Tamaño de la Letra del Titulo
	MousePointer = 15
	Name = "cmdaexcel"
	ncolumnas = 0		&& Nro de columnas de la última consulta.
	nfilapie = 0		&& Fila de Inicio de los datos
	nfilatabla = 5		&& determina a partir de que fila se comienza a ingresar los datos (estos incluye las cabeceras).
	ogriddata = 		&& Vinculo al Objeto Grid a exportar.
	oxls = 		&& Objeto que tiene la referencia al xls
	Picture = 
	PicturePosition = 1
	SpecialEffect = 0
	Themes = .T.
	titulo1 = 
	titulo2 = 
	Width = 79
	
	PROCEDURE Click
		LOCAL	lcOldAlias, lcAlias, lnC, lnColumnas, lnFila, lnFilaTabla, lnColumnas,;
				lnBorders, lnBackColorCabecera, lnForeColorCabecera, ;
				lnLetraSize, lcFuente, ;
				lcCampo, lnOk, lcTipo, lxValor, lnLen, lcLetra, llViejo, lnC, lnG, lnX
		
		lcOldAlias	= alias()		&& Guardar el Alias Anterior
		lcAlias		= This.cAlias	&& Obtener el alias de trabajo
		IF	empty ( lcAlias ) OR NOT used ( lcAlias ) 
			return
		ENDIF
		
		lcLetra		= "'" 	&& Para decirle al EXCEL que las letras que inician con numeros son tal.
		
		SELECT ( lcAlias )
		IF	recc() = 0
			WAIT WIND 'No existen registros a exportar' 
			IF	NOT empty ( lcOldAlias )
				SELECT ( lcOldAlias )
			ENDIF
			RETURN 
		ENDIF
		
		
		
		*Suspender los eventos del Visual Foxpro
		Thisform.LockScreen = .T.
		
		*Asignar a variables de memoria
		WITH THIS
			lnBorders			= .Borders
			lnBackColorCabecera = iif ( empty ( .BackColorCabecera ), ;
										GetSysColor( HIGHLIGHT_SYSCOLOR ),;
										.BackColorCabecera )
										
			lnForeColorCabecera	= iif ( empty ( .ForeColorCabecera ), ;
										GetSysColor( HIGHLIGHTTEXT_SYSCOLOR ),;
										.ForeColorCabecera )
									
			lnLetraSize			= .LetraSize
			lcFuente			= .Fuente
			
			.Elaborado			= iif (	empty ( This.Elaborado ),;
										"OptNomEmpresa",  This.Elaborado ) 
		ENDWITH
		
		store 0 to lnColumnas, lnOk, lnFilaTabla, lnFila, lnColumna
		
		SELECT (lcAlias)								&& Activar el Alias a Exportar
		
		*Comprobar si existe un array de los campos a Exportar
		WITH THIS
			IF	empty( .aExportar[1,1] )				&& Llenar el Array
				
				*Preguntar si hay un grid vinculado
				IF	(  empty ( .cGridData ) AND type ( '.oGridData' ) <> 'O' )
					lnColumnas	= fcount()					&& Saber el Nº de Columnas
		
					DIMENSION  .aExportar( lnColumnas, 3 )
					FOR lnC 	= 1 to lnColumnas
						lcCampo = field(lnC)
						.aExportar( lnC, 1 ) = lcCampo
						.aExportar( lnC, 2 ) = lcCampo
						.aExportar( lnC, 3 ) = iif ( .SoloDatos, .F., ;
													inlist ( vartype ( eval ( lcCampo) ),"N","Y" ) )
					NEXT
				ELSE
					* Esta vinculado a un grid.
					IF	type ( '.oGridData' ) = 'O'
						loGridData		= .oGridData
					ELSE
						loGridData		= eval ( .cGridData )
					ENDIF
					lnColumnas		= loGridData.ColumnCount
					DIMENSION  .aExportar( lnColumnas, 3 )
					FOR lnC 		= 1 to lnColumnas
						lcCampo 	= loGridData.Columns(lnC).ControlSource
						lnX 		= loGridData.Columns(lnC).ColumnOrder
						.aExportar( lnX, 1 ) = lcCampo
						.aExportar( lnX, 2 ) = loGridData.Columns(lnC).Header1.Caption
						.aExportar( lnX, 3 ) = iif ( .SoloDatos, .F., ;
													inlist ( vartype ( eval ( lcCampo) ),"N","Y" ) )
					NEXT
				ENDIF
			ELSE
				lnColumnas	= alen ( .aExportar, 1 )
			ENDIF
		
			*Dimensionar la Lista de Trabajos
			DIMENSION aOrigen[1,4]
		
			*Depurar la Lista de los Campos
			lcCampos		= ""
			FOR lnC 		= 1 to lnColumnas
				*Si es general o Objeto
				lcTipo		= vartype ( eval ( .aExportar( lnC , 1 ) ) ) 
				IF	Inlist ( lcTipo, "O", "G" )
					LOOP
				ENDIF
				
				lnOk		= lnOk + 1
				DIMENSION aOrigen[ lnOk, 4 ]
		
				aOrigen[ lnOk, 1]	= .aExportar( lnC, 1 )
				aOrigen[ lnOk, 2]	= .aExportar( lnC, 2 )
					
				*ver si debe sumar
				DO	CASE 
					CASE Inlist ( lcTipo, "Y", "N" )
						 aOrigen[ lnOk, 3]	= .aExportar( lnC, 3 )
		 				 aOrigen[ lnOk, 4]	= "0." + ;
												iif ( type ( ".aExportar [lnC,4]" ) = 'N', ;
														replicate ( "0", .aExportar[lnC,4] ), "00" )
					CASE lcTipo = "C"
						 aOrigen[ lnOk, 1]	= "lcLetra + " + ;
						 					  .aExportar( lnC, 1 ) && Para hacerlo cadena
				ENDCASE
				lcCampos = lcCampos + .aExportar[ lnC, 1] + ','
			NEXT
		
			*Eliminar el caracter de la izquierda
			lcCampos	= .Ratsincaracter( ',' , lcCampos )
			* Poner la Cabecera de Presentación
			lnFilaCab	= .nFilaTabla
		ENDWITH
		
		*Determinar las celdas y los rangos de la Tabla
		lnFilaIni		= lnFilaCab	+ 1
		lnFilaFin		= lnFilaIni	+ recc() + 2
		
		*Determinar las celdas del Píe de Página
		lnFilaPie		= lnFilaFin + 1
		
		*Determinar el Rango Total
		llViejo			= .T.
		
		* Comprobar si ya existe el objeto oxls
		IF	type ( "This.oXls.ActiveSheet.range('a1').value" ) = "U"
			This.oXls = createobject ( "excel.application" )
			This.oXls.workbooks.add						&& Adicionar un libro
			llViejo		= .F.
		ENDIF
		
		WITH This.oXls
			.DisplayAlerts 					= .F.		&& Desactiva la alerta del Excel
		
			*Desactivar el recalculo automático para hacer más rápido el traspaso de data
		*	.Calculation					= XLMANUAL
		
			IF	llViejo
				*Blanquear la Empresa, la fecha, y los titulos
				.Range( .Cells (1,1), .Cells( This.nFilaPie, This.nColumnas ) ).ClearContents
				.Range( .Cells (1,1), .Cells( This.nFilaPie, This.nColumnas ) ).ClearFormats
			ENDIF
		
			*Asignar los Nuevos Rangos
			This.nFilaPie				= lnFilaPie + 2
			This.nColumnas				= lnColumnas
		
			.ActiveWindow.DisplayGridlines	= .F.		&& Borrar las Lineas del Grid
		
			*Realizar la Determinación de la Tabla
			WITH .Range( This.Oxls.Cells( lnFilaCab, 1 ) , This.Oxls.Cells( lnFilaPie, lnColumnas ) )
				 .Borders(1).LineStyle	= lnBorders
				 .Borders(2).LineStyle	= lnBorders
				 .Font.Name 			= "TAHOMA"
				 .Font.Size 			= 8
			ENDWITH	 
		
			*Caja de las Cabeceras
			WITH .Range( This.Oxls.Cells( lnFilaCab, 1 ) , This.Oxls.Cells( lnFilaCab, lnColumnas ) )
				 .borders(8).linestyle = lnBorders
				 .borders(9).linestyle = lnBorders
		         .Interior.Color	   = lnBackColorCabecera	&& Color Azul
		         .Interior.Pattern 	   = 1
				 .Font.Color		   = lnForeColorCabecera	&& Color Blanco
				 .Font.Bold 		   = .T.
				 .HorizontalAlignment  = 3						&& Centrado Horizontal
		    EndWith
		    	
			*Caja del Pie 
			WITH .Range(This.Oxls.Cells( lnFilaPie, 1 ) , This.Oxls.Cells( lnFilaPie, lnColumnas ) )
				 .borders(8).linestyle 	= lnBorders
				 .borders(9).linestyle 	= lnBorders
				 .Font.Bold 			= .T.
			ENDWITH
			
			*****************************************************************
			*Vaciar la información a la Hoja de Excel la tabla de los datos.
			*****************************************************************
			*Invocar al procedimiento que permite
			LOCAL lcSysF, lcPoint, lcSeparator, lcDate
			store '' to lcSysF, lcPoint, lcSeparator, lcDate
		
			=this.GETSET ( @lcSysF, @lcPoint, @lcSeparator, @lcDate )
			
			*Crear el cursor temporal con los datos
			IF	This.VariasTablas
				This.Enviardata(lnFilaIni, lnColumnas, @aOrigen)
			ELSE
				select &lcCampos FROM &lcAlias INTO CURSOR cursorxls
				_vfp.DataToClip ('cursorxls',,3)	&& Copiar la data a la memoria
			
				.Cells( lnFilaCab, 1 ).Select		&& Seleccionar el Inicio de la Copia de los Datos
				.ActiveSheet.Paste()				&& Copiar los datos al Excel.
				_cliptext	= ''					&& Para liberar la memoria.
				use in cursorxls
			ENDIF
			
			*Poner La fila de las sumas
			lcFilaSumIni	= alltrim ( str ( lnFilaIni ) )
			lcFilaSumFin	= alltrim ( str ( lnFilaFin ) )
			FOR lnC     	= 1 to lnColumnas
				lcColumnaSum= alltrim ( str ( lnC ) )
				*Preguntar si es númerico 
				IF	aorigen[lnC, 3]
					.Range( .Cells( lnFilaIni, lnC ), .Cells( lnFilaPie, lnC ) ).NumberFormat = ;
								aOrigen [lnC, 4 ]
					.Cells( lnFilaPie, lnC ).FormulaR1C1 =	'=sum(' + ;
																	'R' + lcFilaSumIni +;
																	'C' + lcColumnaSum + ':'+;
																	'R' + lcFilaSumFin +;
																	'C' + lcColumnaSum + ')'
				ENDIF
			NEXT
		
			*Poner la Cabecera de los datos
			lnFila			= This.nFilaTabla
			FOR lnC			= 1 to lnColumnas
				.Cells(lnFila, lnC ).Value 		= aOrigen[lnC, 2] && Nombre de la Cabecera
				.Columns(lnC).EntireColumn.AutoFit
				.Cells(lnFila, lnC ).WrapText	= .T.
			NEXT
		
			*Poner el Pie de Hoja y Activar la Hoja
			*Nombre de la Empresa
			*WITH .Cells(1,1)
		*		.Value 					= iif ( empty ( THIS.Empresa ),;
		*								"OptNomEmpresa", THIS.Empresa )
		*		.Font.Bold 				= .T.
		*		.Font.Size 				= 9
		*	ENDWITH
		
			*Fecha de Creación
		*	WITH .Cells(1,lnColumnas)
		*		 .Value 				= "Elaborado el: " + dtoc ( date() )
		*		 .HorizontalAlignment	= 4				&& Alineado a la Derecha
		*		 .Font.Name 			= "Tahoma"
		*		 .Font.Size 			= 8
		*		 .Font.Bold 			= .T.
		*	ENDWITH	 
		
			*Para el Titulo1
			WITH .Cells(3,1)
				.value 					= iif ( empty ( THIS.Titulo1 ),;
										"Datos del archivo:"+THIS.cAlias,;
										THIS.Titulo1 )		&& Titulo Principal  de la Hoja
				.Font.Bold 				= .T.			&& Activar el BOLD
				.Font.Size 				= lnLetraSize
			ENDWITH
		
			WITH .Range( This.Oxls.Cells( 3, 1 ), This.Oxls.Cells( 3, lnColumnas ) )
				 .MergeCells 			= 1				&& Centrar en Columnas
				 .VerticalAlignment		= 2				&& Centrado Vertical
				 .HorizontalAlignment	= 3				&& Centrado Horizontal
			ENDWITH	
		
			*Para el Titulo2
			WITH .Cells(4,1)
				.Value 					= THIS.Titulo2	&& Titulo Secundario de la Hoja
				.Font.Bold 				= .T.			&& Activar el BOLD
				.Font.Size 				= lnLetraSize - 2
			ENDWITH
		
			WITH .Range( This.Oxls.Cells( 4, 1 ), This.Oxls.Cells( 4, lnColumnas ) )
				 .MergeCells 			= 1			&& Centrar en Columnas
			 	 .VerticalAlignment 	= 2			&& Centrado Vertical
				 .HorizontalAlignment	= 3			&& Centrado Horizontal
			ENDWITH
		
		*	IF	NOT This.SoloDatos
			*	WITH .Cells( lnFilaPie + 1, 1 )
			*		 .Value 		= iif ( empty ( lcFuente ), "Fuente:" + lcAlias, lcFuente )
			*		 WITH	.Font
			*		 		.Name	= "Tahoma"
			*			 	.Size 	= 7
			*				.Bold 	= .T.
			*				.Italic	= .T.
		*			ENDWITH		 
		*		ENDWITH
		
			*	WITH .Cells( lnFilaPie + 2, 1 )
			*		 .Value 		= "Elaborado: " + "OptUserNombreCom"
		    *			 WITH	.Font
			*		 		.Name	= "Tahoma"
			*			 	.Size 	= 7
			*				.Bold 	= .T.
			*				.Italic	= .T.
			*		ENDWITH		 
		*		ENDWITH
		*	ENDIF
			
			*Incrustar el grafico
			IF	NOT empty ( This.Grafico ) AND file ( This.Grafico )
				.Cells( lnFilaPie + 5, 3 ).Activate
				.Cells( lnFilaPie + 5, 3 ).Select
				*Borrar si existiera la anterior figura
				FOR lnG = 1 to .ActiveSheet.Shapes.Count
					IF	lower( .ActiveSheet.Shapes.Item(lnG).Name ) = lower ( This.Grafico)
						.ActiveSheet.Shapes.Item(lnG).Delete()
						EXIT
					ENDIF
				NEXT lnG
				.ActiveSheet.Pictures.Insert(This.Grafico)
		    ENDIF
		    
			*Ir a una posición de Inicio 
			.Cells( lnFilaIni, 1 ).Activate
			.Cells( lnFilaIni, 1 ).Select
		
			*Activar la recalculación automática
		*	.Calculation					= XLAUTOMATIC
		
			*Borrar el mensaje en la pantalla
			WAIT CLEAR
		
			this.SETSET ( lcSysF, lcPoint, lcSeparator, lcDate )
		
			*Activar los eventos del Visual Foxpro
			Thisform.LockScreen = .F.
		
			*Hacer visible el Objeto
			.Visible = .T.
		ENDWITH
		
		IF	NOT empty ( lcOldAlias )
			SELECT ( lcOldAlias )
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		IF	NOT type ( "This.oXls.range('a1').value" ) = "U"
			This.oXls.Quit()
			This.oXls = NULL
		ENDIF
		dodefault()
	ENDPROC

	PROCEDURE enviardata		&& Permite manipular los datos y esta intimamente logada a la propiedad manejarenvió.
		PARAMETERS tnFilaIni, tnColumnas, taOrigen
		EXTERNAL ARRAY taOrigen
		
		LOCAL lnFilaReg, lnC, lcLetra, lcCampo, lcAlias
		
		lcLetra 		= "'"
		*Preguntar si se debe de introducir campo por campo
		lnFilaReg		= tnFilaIni
		lcAlias			= This.cAlias
		SELECT (lcAlias)
		SCAN
			FOR lnC		= 1 to tnColumnas
				lcCampo	= taOrigen[lnC, 1]
				.Cells(lnFilaReg, lnC ).Value = eval ( lcCampo ) && Nombre de la Cabecera
			NEXT lnC
			lnFilaReg	= lnFilaReg + 1
		ENDSCAN
	ENDPROC

	PROCEDURE getset
		*Obtiene los set actuales para luego volverlos a poner, poniendo los set por defecto
		LPARAMETERS lcSysF, lcPoint, lcSeparator, lcDate 
			lcSysF 			= SET ( 'sysformat' ) 
			lcPoint 		= SET ( 'Point' )
			lcSeparator		= SET ( 'Separator' )
			lcDate 			= SET ( 'Date' )
			_cliptext		= ''
			SET SysFormat	OFF
			SET POINT 		TO '.'
			SET Separator	TO ','
			SET DATE	 	TO MDY
	ENDPROC

	PROCEDURE Init
		DECLARE INTEGER GetSysColor in win32api integer  
		#DEFINE WINDOWSBACK_SYSCOLOR		5
		#DEFINE WINDOWSTEXT_SYSCOLOR		8
		#DEFINE HIGHLIGHT_SYSCOLOR			13
		#DEFINE HIGHLIGHTTEXT_SYSCOLOR		14
		#DEFINE COLOR_INACTIVECAPTIONTEXT	19
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.FontUnderline= .F. 
		this.ForeColor=Rgb(0,0,0)
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.FontUnderline= .t. 
		this.ForeColor=Rgb(255,0,0)
	ENDPROC

	PROCEDURE ratsincaracter
		PARAMETERS tcCaracter, tcCadena
		LOCAL lnLenPunto
			lnLenPunto	 = ratc ( tcCaracter, tcCadena )
		RETURN iif ( lnLenPunto > 0, left ( tcCadena, lnLenPunto - 1), tcCadena )
	ENDPROC

	PROCEDURE setset
		*Poner los set
		LPARAMETERS lcSysF, lcPoint, lcSeparator, lcDate 
			SET SysFormat	&lcSysF
			SET POINT 		TO &lcPoint
			SET Separator	TO &lcSeparator
			SET DATE	 	TO &lcDate
			_cliptext		= ''
	ENDPROC

	PROCEDURE strzero
		* FUNCION STRZERO
		* AUTOR			ENRIQUE ALBAN IPANAQUE
		* OBJETIVO 		Rellenar un número con con valores a la Izquierda
		*
		* FORMATO			STRZERO ( <tnNumero>, [tnLongitud], [tnDecimal] )
		*
		* ARGUMENTOS
		* 	tnNumero 	 	= Número a Transformar o Cadena Númerica.
		* 	tnLongitud	= Longitud de la Cadena. por DEFECTO es 10 con 2 decimales
		* 	tnDecimal		= Número de decimales, por DEFECTO es 2
		*
		* DEVUELVE
		*	el valor convertido a Cadena y rellenado con ceros por la izquierda.
		*
		* Ejemplos
		*	? STRZERO ( 10    ) => "0000000010"
		*	? STRZERO ( 10,3  ) => "010"
		*	? STRZERO ("10",4 ) => "0010"
		*	? STRZERO ( 10,6,2) => "010.00"
		*FUNCTION STRZERO
		LPARAMETERS txNumero, tnLongitud, tndecimal
		
		IF 	NOT vartype ( tnLongitud ) = "N"
			tnLongitud		= 10
		ENDIF
		IF 	NOT vartype ( tnDecimal ) = "N"
			tnDecimal		= 0
		ELSE
			tnDecimal 		= iif ( tnDecimal > tnLongitud, 0, tnDecimal )
		ENDIF
		
		IF	vartype ( txNumero ) = "N"
			txNumero 		= str( txNumero, tnLongitud, tnDecimal )
		ENDIF
		
		RETURN padl( alltrim ( txNumero ), tnLongitud, '0')
	ENDPROC

ENDDEFINE

DEFINE CLASS etiqueta AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lbltitulo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />

	BackColor = 0,0,0
	BorderColor = 255,255,255
	Height = 144
	Name = "etiqueta"
	Width = 794

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		BackColor = 64,0,64, ;
		BorderStyle = 1, ;
		Caption = "EtCh - Telf. 074-252760 Cel-074-9642967 Email Eduartch@hotmail.com", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 10, ;
		FontUnderline = .T., ;
		ForeColor = 255,255,255, ;
		Height = 15, ;
		Left = 156, ;
		Name = "Label1", ;
		Top = 119, ;
		Width = 480
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lbltitulo' AS label WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		BackColor = 0,0,0, ;
		BorderStyle = 0, ;
		Caption = "", ;
		FontName = "Impact", ;
		FontSize = 90, ;
		ForeColor = 255,255,255, ;
		Height = 85, ;
		Left = 4, ;
		Name = "lbltitulo", ;
		Top = 9, ;
		Width = 749
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		BorderColor = 255,255,255, ;
		BorderWidth = 4, ;
		Height = 0, ;
		Left = 1, ;
		Name = "Line1", ;
		Top = 112, ;
		Width = 792
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE Init
		if !used("fe_gene")
		    use fe_gene in 0 shared
		endif    
		this.lbltitulo.caption=alltrim(fe_gene.empresa)
		this.lbltitulo.FontSize=fe_gene.tama
	ENDPROC

ENDDEFINE
