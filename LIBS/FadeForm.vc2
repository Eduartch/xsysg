*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="fadeform.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS fadeform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: documentation		&& Notes on using this class
		*m: fadein		&& Causes the form to fade in gradually
		*m: fadeout		&& Causes the form to fade out gradually
		*p: lfade		&& Says if the form is to fade in/out gradually rather than appear / disappear instantly
	*</DefinedPropArrayMethod>

	Caption = "Form"
	DoCreate = .T.
	Name = "fadeform"
	ShowWindow = 2
	
	PROCEDURE Destroy
		* Tell the form to fade out
		thisform.FadeOut
		
	ENDPROC

	PROCEDURE documentation		&& Notes on using this class
		* Fading form class.
		
		* Written by M. Lewis. June 2006.
		
		* Copyright Mike Lewis Consultants Ltd. May be freely used or distributed, but please
		* do not remove this copyright notice or the following disclaimer:
		
		* Although we have tested this class thoroughly, we cannot accept any legal liability 
		* for its use.
		
		* To contact the author, please see www.ml-consult.co.uk
		
		* Requires VFP 7.0 or above
		
		* ------------------------------------------------------------------
		
		* Use this class to create forms that will fade in and out gradually, rather than
		* suddenly appearing and disappearing when they are instantiated and destroyed. By default,
		* the form will take about one second to completely appear on instantiation, and the 
		* same time to completely disappear when closed. This can provide a pleasing visual
		* effect.
		
		* Restrictions:
		*	- Requires Windows 2000 or above
		*	- Only works with top-level forms
		
		* To use the class, simply create a form based on the class. Set the lFade property
		* to .T. to enable the fading (default = .F.).
		
		* If you add code to your form's Init or Destroy, be sure either to call DODEFAULT() 
		* or to explicitly call the class's FadeIn method from your Init (preferably after 
		* all other initialisation has been done), and similarly call DODEFAULT() or explicitly
		* call the class's FadeOut method from your Destroy.
		
		* To add the functionality to an existing form or class:
		*	- Add the FadeIn and FadeOut methods, and the lFade property, to your form or class.
		*	- Copy the code from the FadeIn and FadeOut methods in this class to the 
		*	  corresponding methods in your own class or form.
		*	- Call FadeIn from your class or form's Init.
		*	- Call FadeOut from your class or form's Destroy.
		*	- Copy the code from this class's Load method to the Load method of your
		*	  own form or class.
		
		* Note that the class requires certain API functions to be declared. This is done in
		* the Load method, and is therefore repeated every time a form based on the class is
		* instantiated. This is wasteful of resources. It would be better to declare these
		* API calls once only in the session, for example, from your main program.
		
	ENDPROC

	PROCEDURE fadein		&& Causes the form to fade in gradually
		* Gradually fade into the form. This should be called from the Init, prefereably after
		* all other initialisation has been done.
		
		LOCAL lnTrans
		
		* If fade effect not required, do nothing
		IF NOT thisform.lFade 
			RETURN 
		ENDIF 
		
		* Make the form fully transparent
		SetWindowLong(THISFORM.hWnd, -20, 0x00080000)
		SetLayeredWindowAttributes(THISFORM.hWnd, 0, 0, 2)
		
		* Show the form (this tells VFP to show the form; at this stage, nothing will
		* appear on the screen, because the form is still fully transparent)
		thisform.Visible = .T.
		
		* Now gradually fade in, taking about one second to do so
		lnTrans = 10
		DO WHILE .T.
			SetLayeredWindowAttributes(THISFORM.hWnd, 0, lnTrans, 2)
			lnTrans = lnTrans + 10
			IF lnTrans > 255
				EXIT
			ENDIF 
			Sleep(35)		&& increase this figure for slower fading, decrease for faster
		ENDDO 
			
		* The form is now fully opaque
		
		
		
	ENDPROC

	PROCEDURE fadeout		&& Causes the form to fade out gradually
		* Gradually fade out of the form
		LOCAL lnTrans
		
		* If fade effect not required, do nothing
		IF NOT thisform.lFade 
			RETURN 
		ENDIF 
		
		SetWindowLong(THISFORM.hWnd, -20, 0x00080000)
		
		* Gradually fade out, taking about one second to do so
		lnTrans = 255
		DO WHILE .T.
			SetLayeredWindowAttributes(THISFORM.hWnd, 0, lnTrans, 2)
			lnTrans = lnTrans - 10
			IF lnTrans < 50
				EXIT
			ENDIF 
			Sleep(35)		&& increase this figure for slower fading, decrease for faster
		ENDDO 
			
		
		
		
		
	ENDPROC

	PROCEDURE Init
		* Tell the form to fade in; this should preferably be done at the end
		* of the initialisation process
		thisform.FadeIn
	ENDPROC

	PROCEDURE Load
		* Declare required API calls. Note: It would be better to do this early in the application
		* (such as in the main program) before launching the form. By doing it here, we repeat
		* the DECLAREs every time any form based on this class is launched. This is wasteful
		* of resources.
		DECLARE INTEGER SetWindowLong In Win32Api ;
			INTEGER HWnd, INTEGER Index, INTEGER NewVal
		DECLARE INTEGER SetLayeredWindowAttributes In Win32Api ;
			INTEGER HWnd, STRING ColorKey, ;
			INTEGER Opacity, INTEGER Flags
		DECLARE Sleep IN WIN32API INTEGER Duration	
			
		* NOTE: The first two of the above DECLAREs require Windows 2000 or later
		
		
	ENDPROC

ENDDEFINE
