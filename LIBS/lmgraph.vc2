*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="lmgraph.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS lmgraph AS container 		&& Clase para gráficas de barras y torta
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lbl" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: coloresbasicos		&& Retorna un color básico
		*m: generargrafica		&& Genera la Gráfica
		*m: limpiargrafica		&& Remueve todos los objetos de la clase
		*p: alias		&& Alias de la tabla o cursor con los datos a graficar.
		*p: tipocolor		&& 0=Aleatorio y 1=Colores básicos
		*p: tipografica		&& 0=Torta; 1=Anillo; 2=Barra vertical; 3=Barra horizontal; 4=Cono vertical; 5=Cono horizontal
		*p: tipoleyenda		&& 0=Sin Leyenda; 1=Valores; 2=Porcentaje; 3=Rótulos; 4=Rótulos  y Valores; 5=Porcentaje y Rótulos
		*p: titulografica		&& Título de la gráfica
	*</DefinedPropArrayMethod>

	alias = 		&& Alias de la tabla o cursor con los datos a graficar.
	BackColor = 255,255,255
	Height = 100
	Name = "lmgraph"
	SpecialEffect = 1
	tipocolor = 0		&& 0=Aleatorio y 1=Colores básicos
	tipografica = 0		&& 0=Torta; 1=Anillo; 2=Barra vertical; 3=Barra horizontal; 4=Cono vertical; 5=Cono horizontal
	tipoleyenda = 5		&& 0=Sin Leyenda; 1=Valores; 2=Porcentaje; 3=Rótulos; 4=Rótulos  y Valores; 5=Porcentaje y Rótulos
	titulografica = Título		&& Título de la gráfica
	Width = 200

	ADD OBJECT 'lbl' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "lmGraph v.1.0", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 8, ;
		Name = "lbl", ;
		Top = 8, ;
		Visible = .F., ;
		Width = 79
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE coloresbasicos		&& Retorna un color básico
		LPARAMETERS tn
		LOCAL la(28)
		tn = MOD(tn-1,28)+1
		la(1) = RGB(255,0,0) && Rojo
		la(2) = RGB(255,255,0) && Amarillo
		la(3) = RGB(0,0,255) && Azul
		la(4) = RGB(0,128,0) && Verde Oscuro
		la(5) = RGB(255,128,0) && Anaranjado
		la(6) = RGB(128,64,0) && Marrón
		la(7) = RGB(255,0,255) && Magenta
		la(8) = RGB(128,0,255) && Violeta
		la(9) = RGB(0,255,255) && Cyan
		la(10) = RGB(192,192,0) && Amarillo Oscuro
		la(11) = RGB(192,0,0) && Rojo Oscuro
		la(12) = RGB(0,255,0) && Verde
		la(13) = RGB(0,0,128) && Azul Oscuro
		la(14) = RGB(255,192,0) && Anaranjado Claro
		la(15) = RGB(0,192,255) && Azul claro
		la(16) = RGB(128,128,0) && Marrón Claro
		la(17) = RGB(255,192,255) && Magenta Claro
		la(18) = RGB( 64,128,128) && Verde Azulado
		la(19) = RGB(255,0,128) && Fucsia
		la(20) = RGB(255,255,192) && Amarillo Claro
		la(21) = RGB(192,0,255) && Violeta Claro
		la(22) = RGB(192,255,192) && Verde Claro
		la(23) = RGB(128,0,128) && Violeta Oscuro
		la(24) = RGB(192,255,255) && Cyan Claro
		la(25) = RGB(128,128,128) && Gris Oscuro
		la(26) = RGB(255,255,255) && Blanco
		la(27) = RGB(192,192,192) && Gris
		la(28) = RGB(0,0,0) && Negro
		RETURN la(tn)
		
	ENDPROC

	PROCEDURE generargrafica		&& Genera la Gráfica
		LOCAL lcCampoRotulo, lcCampo, lnSaltoH, lnSaltoV, lnReg, ;
		  lnTotal, lnCantReg, lnMaximo, lnMaxWidth, lcRotulo, lnValor, lnPorc, ;
		  lcObjPor, lcObjShp, lcObjLey, lnDim, lnHasta, ;
		  lnI, lnJ, lnAng, lnCos, lnSen, lcObj1, lcObj2
		*--
		*-- Limpio los objetos del gráfico
		*--
		THIS.LimpiarGrafica()
		*---
		*--- Verifico la versión de VFP y tipo de gráfica
		*---
		IF VERSION(5) < 900 AND INLIST(THIS.TipoGrafica, 0, 1, 4, 5)
		  MESSAGEBOX("El tipo de gráfica seleccionada no esta disponible para" + ;
		    CHR(13) + VERSION(), 48, "lmGraph")
		  RETURN
		ENDIF
		*--
		*-- Tabla de datos
		*--
		IF EMPTY(THIS.ALIAS)
		  MESSAGEBOX("No especificó la propiedad Alias.", 48, "lmGraph")
		  RETURN
		ENDIF
		IF NOT USED(THIS.ALIAS)
		  MESSAGEBOX("La tabla " + PROPER(THIS.ALIAS) + ;
		    " no está en uso.", 48, "lmGraph")
		  RETURN
		ENDIF
		IF AFIELDS(la,THIS.ALIAS) < 2
		  MESSAGEBOX("La tabla " + PROPER(THIS.ALIAS) + ;
		    " tiene menos de dos campos.", 48, "lmGraph")
		  RETURN
		ENDIF
		IF NOT INLIST(la(1,2), "N", "I","D")
		  MESSAGEBOX("El segundo campo de la tabla " + PROPER(THIS.ALIAS) + ;
		    " no es numérico.", 48, "lmGraph")
		  RETURN
		ENDIF
		SELECT (THIS.ALIAS)
		lcCampoValor = la(1,1)
		lcCampoRotulo = la(2,1)
		CALCULATE COUNT() TO lnCantReg
		IF lnCantReg = 0
		  MESSAGEBOX("La tabla " + PROPER(THIS.ALIAS) + ;
		    " no contiene datos.", 48, "lmGraph")
		  RETURN
		ENDIF
		CALCULATE SUM(EVALUATE(lcCampoValor)) TO lnTotal
		CALCULATE MAX(EVALUATE(lcCampoValor)) TO lnMaximo
		*--
		*-- Variables y área del gráfico
		*--
		#DEFINE AnguloPrimerSector 270
		#DEFINE AngulosParaGraficar 360
		lnAnguloSector = AnguloPrimerSector
		lnLeft = 10
		lnTop = IIF(EMPTY(THIS.TituloGrafica),10,30)
		lnWidth = THIS.WIDTH - lnLeft * 2
		lnHeight = THIS.HEIGHT - lnTop - lnLeft
		lnSaltoH = FLOOR(lnHeight / lnCantReg)
		*--
		*-- Titulo del gráfico
		*--
		IF NOT EMPTY(THIS.TituloGrafica) && Con título
		  THIS.ADDOBJECT("lblTitulo","Label")
		  WITH THIS.lblTitulo
		    .BACKSTYLE = 0
		    .ALIGNMENT = 2
		    .FONTSIZE = 12
		    .FONTBOLD = .T.
		    .CAPTION = THIS.TituloGrafica
		    .TOP = 5
		    .LEFT = lnLeft
		    .WIDTH = lnWidth
		    .HEIGHT = 30
		  ENDWITH
		ENDIF
		*--
		*-- Armo leyenda y tomo el ancho
		*--
		IF THIS.TipoLeyenda # 0 && Con leyenda
		  lnMaxWidth = 0
		  lnReg = 1
		  SCAN ALL
		    lcRotulo = ALLTRIM(TRANSFORM(EVALUATE(lcCampoRotulo)))
		    lnValor = EVALUATE(lcCampoValor)
		    lnPorc = lnValor / lnTotal * 100
		    lcObjLey = "oLey" + TRANSFORM(lnReg)
		    THIS.ADDOBJECT(lcObjLey,"Label")
		    WITH THIS.&lcObjLey
		      .TOP = lnSaltoH * lnReg - lnSaltoH + lnTop
		      DO CASE
		        CASE THIS.TipoLeyenda = 1
		          .CAPTION = TRANSFORM(lnValor)
		        CASE THIS.TipoLeyenda = 2
		          .CAPTION = TRANSFORM(ROUND(lnPorc,2)) + "%"
		        CASE THIS.TipoLeyenda = 3
		          .CAPTION = lcRotulo
		        CASE THIS.TipoLeyenda = 4
		          .CAPTION = lcRotulo + " - " + TRANSFORM(lnValor)
		        OTHERWISE
		          .CAPTION = TRANSFORM(ROUND(lnPorc,2)) + "% - " + lcRotulo
		      ENDCASE
		      .FONTSIZE = 8
		      .BACKSTYLE = 0
		      .LEFT = lnWidth + 100
		      .AUTOSIZE = .T.
		      .VISIBLE = .T.
		      lnMaxWidth = MAX(lnMaxWidth,.WIDTH)
		    ENDWITH
		    lnReg = lnReg + 1
		  ENDSCAN
		  lnLeftLeyenda = MAX(lnWidth * .60, lnWidth - lnMaxWidth - 40)
		ENDIF
		*--
		*-- Armo el resto del gráfico
		*--
		lnReg = 1
		SCAN ALL
		  lnValor = EVALUATE(lcCampoValor)
		  lnPorc = lnValor / lnTotal * 100
		  *--
		  *-- Armo cada porcion
		  *--
		  lcObjPor = "oPor" + TRANSFORM(lnReg)
		  THIS.ADDOBJECT(lcObjPor,"Shape")
		  WITH THIS.&lcObjPor
		    DO CASE
		      CASE THIS.TipoGrafica = 0 OR THIS.TipoGrafica = 1 && Torta/Anillo
		        IF THIS.TipoLeyenda = 0  && Sin leyenda
		          STORE MIN(lnWidth ,lnHeight) TO .WIDTH, .HEIGHT
		          .TOP = FLOOR((lnHeight - .HEIGHT) / 2 + lnTop)
		          .LEFT = FLOOR((lnWidth - .WIDTH) / 2 + lnLeft)
		        ELSE
		          STORE MIN(lnLeftLeyenda, lnHeight) TO .WIDTH, .HEIGHT
		          .TOP = FLOOR((lnHeight - .HEIGHT) / 2 + lnTop)
		          .LEFT = FLOOR((lnLeftLeyenda - .WIDTH) / 2 + lnLeft)
		        ENDIF
		        .POLYPOINTS = "This.aPoly"
		        lnDim = AngulosParaGraficar * lnPorc / 100
		        lnHasta = CEILING(lnDim) + 1
		        .ADDPROPERTY("aPoly[" + TRANSFORM(lnHasta) + ",2]")
		        STORE 50 TO .aPoly[1,1], .aPoly[1,2]
		        FOR lnI = 2 TO lnHasta
		          lnAng = (360 / AngulosParaGraficar) * (lnI - 2)
		          lnCos = COS(DTOR(lnAng + lnAnguloSector))
		          lnSen = SIN(DTOR(lnAng + lnAnguloSector))
		          .aPoly(lnI,1) = 50 * lnCos + 50
		          .aPoly(lnI,2) = 50 * lnSen + 50
		        ENDFOR
		        lnAnguloSector = lnAnguloSector + lnDim * 360 / AngulosParaGraficar
		      CASE THIS.TipoGrafica = 2 OR THIS.TipoGrafica = 4 && Barras/Conos Verticales
		        IF THIS.TipoLeyenda = 0 && Sin leyenda
		          lnSaltoV = FLOOR(lnWidth / lnCantReg)
		        ELSE
		          lnSaltoV = FLOOR(lnLeftLeyenda / lnCantReg)
		        ENDIF
		        .WIDTH = lnSaltoV + 1
		        .LEFT = lnSaltoV * lnReg - lnSaltoV + lnLeft
		        .HEIGHT = lnValor / lnMaximo * lnHeight
		        .TOP = lnHeight - .HEIGHT + lnTop
		        IF THIS.TipoGrafica = 4 && Conos
		          .POLYPOINTS = "This.aPoly"
		          .ADDPROPERTY("aPoly[" + TRANSFORM(4) + ",2]")
		          STORE 0 TO .aPoly[1,1], .aPoly[2,2], .aPoly[3,2]
		          STORE 100 TO .aPoly[1,2], .aPoly[4,1], .aPoly[4,2]
		          .aPoly[2,1] = 30
		          .aPoly[3,1] = 70
		        ENDIF
		      CASE THIS.TipoGrafica = 3 OR THIS.TipoGrafica = 5 && Barras/Conos Horizontales
		        IF THIS.TipoLeyenda = 0 && Sin leyenda
		          .WIDTH = lnValor / lnMaximo * lnWidth
		        ELSE
		          .WIDTH = lnValor / lnMaximo * lnLeftLeyenda
		        ENDIF
		        .LEFT = lnLeft
		        .HEIGHT = lnSaltoH + 1
		        .TOP = lnSaltoH * lnReg - lnSaltoH + lnTop
		        IF THIS.TipoGrafica = 5 && Conos
		          .POLYPOINTS = "This.aPoly"
		          .ADDPROPERTY("aPoly[" + TRANSFORM(4) + ",2]")
		          STORE 0 TO .aPoly[1,1], .aPoly[2,1], .aPoly[2,2]
		          STORE 100 TO .aPoly[1,2], .aPoly[3,1], .aPoly[4,1]
		          .aPoly[3,2] = 25
		          .aPoly[4,2] = 75
		        ENDIF
		      OTHERWISE
		        MESSAGEBOX("Tipo de gráfica no definida.", 48, "lmGraph")
		        RETURN
		    ENDCASE
		    *--
		    *-- Color de la porción
		    *--
		    IF THIS.TipoColor = 0
		      .BACKCOLOR = FLOOR(RAND() * 16777216) && Aleatorio
		    ELSE
		      .BACKCOLOR = THIS.ColoresBasicos(lnReg)
		    ENDIF
		  ENDWITH
		  *--
		  *-- Armo leyendas
		  *--
		  IF THIS.TipoLeyenda # 0 && Con leyenda
		    lcObjShp = "oShp" + TRANSFORM(lnReg)
		    THIS.ADDOBJECT(lcObjShp,"Shape")
		    WITH THIS.&lcObjShp
		      .HEIGHT = 12
		      .WIDTH = 12
		      .BACKCOLOR = EVALUATE("THIS.oPor" + TRANSFORM(lnReg) + ".BACKCOLOR")
		      .TOP = lnSaltoH * lnReg - lnSaltoH + lnTop
		      .LEFT = lnLeftLeyenda + lnLeft  + 10
		    ENDWITH
		    lcObjLey = "oLey" + TRANSFORM(lnReg)
		    WITH THIS.&lcObjLey
		      .LEFT = lnLeftLeyenda + lnLeft + 30
		    ENDWITH
		  ENDIF
		  lnReg = lnReg + 1
		ENDSCAN
		*--
		*-- Anillo
		*--
		IF THIS.TipoGrafica = 1 && Anillo
		  THIS.ADDOBJECT("oShpMed","Shape")
		  WITH THIS.oShpMed
		    IF THIS.TipoLeyenda = 0  && Sin leyenda
		      STORE MIN(lnWidth ,lnHeight) * .45 TO .WIDTH, .HEIGHT
		      .TOP = FLOOR((lnHeight - .HEIGHT) / 2 + lnTop)
		      .LEFT = FLOOR((lnWidth - .WIDTH) / 2 + lnLeft)
		    ELSE
		      STORE MIN(lnLeftLeyenda, lnHeight) * .45 TO .WIDTH, .HEIGHT
		      .TOP = FLOOR((lnHeight - .HEIGHT) / 2 + lnTop)
		      .LEFT = FLOOR((lnLeftLeyenda - .WIDTH) / 2 + lnLeft)
		    ENDIF
		    .BACKCOLOR = THIS.BACKCOLOR
		    .curvature = 99
		  ENDWITH
		ENDIF
		*--
		*-- Uno porciones en Torta/Anillo
		*--
		IF THIS.TipoGrafica = 0 OR THIS.TipoGrafica = 1 && Torta/Anillo
		  FOR lnI = 1 TO lnCantReg - 1
		    lcObj1 = "This.oPor" + TRANSFORM(lnI)
		    lcObj2 = "This.oPor" + TRANSFORM(lnI+1)
		    lnJ = ALEN(&lcObj1..aPoly,1)
		    &lcObj1..aPoly(lnJ,1) = &lcObj2..aPoly(2,1)
		    &lcObj1..aPoly(lnJ,2) = &lcObj2..aPoly(2,2)
		  ENDFOR
		  lcObj1 = "This.oPor" + TRANSFORM(1)
		  lnJ = ALEN(&lcObj2..aPoly,1)
		  &lcObj2..aPoly(lnJ,1) = &lcObj1..aPoly(2,1)
		  &lcObj2..aPoly(lnJ,2) = &lcObj1..aPoly(2,2)
		ENDIF
		*--
		*-- Hago visible los objetos creados
		*--
		THIS.SETALL("Visible",.T., "Shape")
		THIS.SETALL("Visible",.T., "Label")
		
	ENDPROC

	PROCEDURE Init
		SET TALK OFF
		RAND(-1)
		
	ENDPROC

	PROCEDURE limpiargrafica		&& Remueve todos los objetos de la clase
		LOCAL lnI
		FOR lnI = THIS.CONTROLCOUNT TO 1 STEP -1
		  THIS.REMOVEOBJECT(THIS.CONTROLS(lnI).NAME)
		ENDFOR
		
		
	ENDPROC

ENDDEFINE
