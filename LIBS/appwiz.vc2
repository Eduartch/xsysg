*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="appwiz.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
*< LIBCOMMENT: Application Wizard framework class library. />
*
DEFINE CLASS wzaboutdialog AS form 		&& About form class used as an About dialog in the framework for the Application Wizard.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Acerca de"
	DoCreate = .T.
	FontSize = 8
	Height = 250
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "wzaboutdialog"
	Width = 375
	WindowType = 1

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "Aceptar", ;
		Default = .T., ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 285, ;
		Name = "cmdOK", ;
		Top = 215, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=23 OR nKeyCode=27
			this.Release
		ENDIF
		
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.Release
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wzapplication AS container 		&& Application class used as a framework for the Application Wizard.
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\sisfotos.h"
	*<DefinedPropArrayMethod>
		*m: beforereadevents		&& Method executed before READ EVENTS is executed when ReadEvents is called.
		*m: clearevents		&& Clears any pending read events.
		*m: dobarra		&& Muestra la barra de herramientas
		*m: doetiqueta
		*m: doform		&& Executes an SCX form.
		*m: dolabel		&& Executes an LBX label
		*m: domenu		&& Executes an MPR menu.
		*m: doprogram		&& Executes a PRG, APP, or EXE program.
		*m: doreport		&& Executes an FRX report.
		*m: filenotfoundmsgbox		&& Displays a File Not Found messagebox.
		*m: form
		*m: getcaption		&& Returns the caption of the application.
		*m: geticon		&& Returns the icon of the application.
		*m: ocultarbarra
		*m: onshutdown		&& Occurs when the user attempts to exit Visual FoxPro.
		*m: readevents		&& Starts read events mode.
		*m: refreshformscollection		&& Refresh forms collection arrays and counters.
		*m: release		&& Releases the application from memory.
		*m: releaseform		&& Release specifc or active form from memory.
		*m: releaseforms		&& Release all application forms from memory.
		*m: resetformscollection		&& Reset arrays and counters of forms collection.
		*m: restoreenvironment		&& Restores environment settings.
		*m: salida
		*m: saveenvironment		&& Saves environment settings.
		*m: show		&& Displays the application.
		*p: alma_nega
		*p: autorizactas
		*p: año
		*p: barra
		*p: barravisible
		*p: bdconn
		*p: cajeroalmacen
		*p: calma
		*p: carchivo
		*p: cbusqueda
		*p: ccaption		&& Caption of the application object.
		*p: cicon		&& Icon of the application object.
		*p: clastcaption		&& Last caption setting of _screen before application object was intantiated.
		*p: clasticon		&& Last icon setting of _screen before application object was intantiated.
		*p: cmes
		*p: codcliente
		*p: codigocliente
		*p: codigoproducto
		*p: codigoproveedor
		*p: cstartupbarra
		*p: cstartupform		&& Form (SCX) which is executed when the application object is shown.
		*p: cstartupmenu		&& Menu (MPR) which is executed when the application object is shown.
		*p: ct1
		*p: ct2
		*p: ct3
		*p: ct4
		*p: descproducto		&& Para Grabar la descripción del producto
		*p: diario
		*p: direccion
		*p: etiqueta
		*p: fechainicial
		*p: fechamaxima
		*p: fechaminima
		*p: fono
		*p: foxy
		*p: idcajero
		*p: ipservidor
		*p: lcascadeforms		&& Specifies whether forms are cascaded if multiple instances of the same form are opened in the same top and left positions of the desktop.
		*p: lreadevents		&& Enable READ EVENTS within ReadEvents method.
		*p: mes
		*p: nformcount		&& Forms collection count for application object.
		*p: nidusua
		*p: nomcliente		&& Guarda el Nombre del Cliente
		*p: nomproveedor		&& Donde se guarda el nombre del proveedor
		*p: npara1
		*p: npara10
		*p: npara11
		*p: npara12
		*p: npara13
		*p: npara14
		*p: npara15
		*p: npara16
		*p: npara17
		*p: npara18
		*p: npara19
		*p: npara2
		*p: npara20
		*p: npara21
		*p: npara22
		*p: npara23
		*p: npara24
		*p: npara25
		*p: npara26
		*p: npara27
		*p: npara3
		*p: npara4
		*p: npara5
		*p: npara6
		*p: npara7
		*p: npara8
		*p: npara9
		*p: npixeloffset		&& Number of pixels which offset multiple instances of the same form.
		*p: nruc
		*p: obarra
		*p: opcion
		*p: porcodigo
		*p: pornombre
		*p: reporte
		*p: seltransporte
		*p: selvendedor
		*p: serieb
		*p: serief
		*p: serieg
		*p: seriep
		*p: seriepp
		*p: subtituloinforme
		*p: tda
		*p: ticket
		*p: tienda
		*p: tipoacceso
		*p: tipoh
		*p: tipousuario
		*p: tituloinforme
		*p: uauto
		*p: usuario
		*p: vitems
		*p: xopcion
		*a: aformnames[1,0]		&& Form name collection for application object.
		*a: aforms[1,0]		&& Forms collection for application object.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	PROTECTED ccaption,cicon,clastcaption,clasticon,Destroy,Init
	alma_nega = .F.
	autorizactas = 
	BackColor = 174,174,174
	barra = barrak
	barravisible = 
	bdconn = .F.
	cajeroalmacen = 0
	calma = 
	carchivo = 
	cbusqueda = 
	ccaption = 		&& Caption of the application object.
	cicon = 		&& Icon of the application object.
	clastcaption = 		&& Last caption setting of _screen before application object was intantiated.
	clasticon = 		&& Last icon setting of _screen before application object was intantiated.
	cmes = .F.
	codcliente = 0
	codigocliente = 
	codigoproducto = 
	codigoproveedor = 
	cstartupbarra = 
	cstartupform = 		&& Form (SCX) which is executed when the application object is shown.
	cstartupmenu = 		&& Menu (MPR) which is executed when the application object is shown.
	ct1 = 
	ct2 = 
	ct3 = 
	ct4 = 
	diario = 
	direccion = .F.
	etiqueta = oetiqueta
	fechainicial = 
	fechamaxima = 
	fechaminima = 
	fono = 
	foxy = 0
	Height = 46
	idcajero = .F.
	ipservidor = 
	lcascadeforms = .T.		&& Specifies whether forms are cascaded if multiple instances of the same form are opened in the same top and left positions of the desktop.
	lreadevents = .T.		&& Enable READ EVENTS within ReadEvents method.
	Name = "wzapplication"
	nformcount = 0		&& Forms collection count for application object.
	nidusua = 0
	npara1 = .F.
	npara10 = .F.
	npara11 = .F.
	npara12 = .F.
	npara13 = .F.
	npara14 = .F.
	npara15 = .F.
	npara16 = .F.
	npara17 = .F.
	npara18 = .F.
	npara19 = .F.
	npara2 = .F.
	npara20 = .F.
	npara21 = .F.
	npara22 = .F.
	npara23 = .F.
	npara24 = .F.
	npara25 = .F.
	npara26 = 
	npara27 = 0
	npara3 = .F.
	npara4 = .F.
	npara5 = .F.
	npara6 = .F.
	npara7 = .F.
	npara8 = .F.
	npara9 = .F.
	npixeloffset = 22		&& Number of pixels which offset multiple instances of the same form.
	nruc = .F.
	obarra = barra
	opcion = 
	porcodigo = 0
	pornombre = 1
	reporte = 
	seltransporte = 
	selvendedor = 0
	seriepp = .F.
	SpecialEffect = 2
	subtituloinforme = 
	ticket = 
	tienda = .F.
	tipoacceso = 
	tipoh = P
	tipousuario = 
	tituloinforme = 
	uauto = 0
	usuario = 
	Visible = .F.
	vitems = 0
	Width = 119
	xopcion = 0
	_memberdata = <VFPData>
		<memberdata name="vitems" type="property" display="Vitems"/>
		<memberdata name="diario" type="property" display="Diario"/>
		<memberdata name="pornombre" type="property" display="PorNombre"/>
		<memberdata name="porcodigo" type="property" display="PorCodigo"/>
		<memberdata name="codcliente" type="property" display="CodCliente"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROTECTED PROCEDURE beforereadevents		&& Method executed before READ EVENTS is executed when ReadEvents is called.
	ENDPROC

	PROCEDURE clearevents		&& Clears any pending read events.
		CLEAR EVENTS
		
	ENDPROC

	PROTECTED PROCEDURE Destroy
		CLEAR EVENTS
		this.RestoreEnvironment
		
	ENDPROC

	PROCEDURE dobarra		&& Muestra la barra de herramientas
		LPARAMETERS obarra
		this.barra = CREATEOBJECT(obarra)
		this.barra.Show
		
		
	ENDPROC

	PROCEDURE doetiqueta
		LPARAMETERS oetiqueta
		this.etiqueta = CREATEOBJECT(oetiqueta)
		WITH _screen
		.addobject('oetiqueta','etiqueta')
		.oetiqueta.top=140
		.oetiqueta.visible=.t.
		ENDWITH 
		
		
		
		
		
	ENDPROC

	PROCEDURE doform		&& Executes an SCX form.
		LPARAMETERS tcFileName,tcClass,tlNoMultipleInstances,tlNoShow
		LOCAL lcFileName,lcClass,oForm,oForm2,lcName,lnCount,lnTop,lnLeft
		LOCAL lcFormName,lnFormCount
		
		lcFileName=ALLTRIM(tcFileName)
		IF EMPTY(lcFileName)
			RETURN .F.
		ENDIF
		lcClass=IIF(TYPE("tcClass")=="C",LOWER(ALLTRIM(tcClass)),"")
		lcFileName=LOWER(FULLPATH(lcFileName))
		IF NOT "."$lcFileName
			lcFileName=lcFileName+IIF(EMPTY(lcClass),".scx",".vcx")
		ENDIF
		IF NOT FILE(lcFileName)
			this.FileNotFoundMsgBox(lcFileName)
			RETURN .F.
		ENDIF
		lcFormName=IIF(EMPTY(lcClass),lcFileName,lcFileName+","+lcClass)
		IF tlNoMultipleInstances
			FOR lnCount = 1 TO this.nFormCount
				IF this.aFormNames[lnCount]==lcFormName AND ;
						TYPE("this.aForms[lnCount]")=="O" AND ;
						NOT ISNULL(this.aForms[lnCount])
					this.aForms[lnCount].Show
					RETURN .F.
				ENDIF
			ENDFOR
		ENDIF
		this.RefreshFormsCollection
		this.nFormCount=this.nFormCount+1
		DIMENSION this.aForms[this.nFormCount],this.aFormNames[this.nFormCount]
		this.aFormNames[this.nFormCount]=lcFormName
		IF NOT EMPTY(lcClass)
			SET CLASSLIB TO (lcFileName) ADDITIVE
			this.aForms[this.nFormCount]=CREATEOBJECT(lcClass)
			IF NOT tlNoShow AND TYPE("this.aForms[this.nFormCount]")=="O" AND ;
					NOT ISNULL(this.aForms[this.nFormCount])
				this.aForms[this.nFormCount].Show
			ENDIF
		ELSE
			DO FORM (lcFileName) NAME this.aForms[this.nFormCount] LINKED NOSHOW
		ENDIF
		lnFormCount=this.nFormCount
		this.RefreshFormsCollection
		IF this.lCascadeForms AND this.nFormCount>=lnFormCount
			oForm=this.aForms[this.nFormCount]
			lnTop=oForm.Top
			lnLeft=oForm.Left
			lcName=oForm.Name
			IF WEXIST(lcName) AND oForm.WindowState#2
				FOR lnCount = 1 TO (this.nFormCount-1)
					oForm2=this.aForms[lnCount]
					IF TYPE("oForm2")#"O" OR ISNULL(oForm2)
						LOOP
					ENDIF
					IF lcName==oForm2.Name AND WLROW(lcName)=WLROW(oForm2.Name) AND ;
							WLCOL(lcName)=WLCOL(oForm2.Name)
						lnTop=lnTop+this.nPixelOffset
						lnLeft=lnLeft+this.nPixelOffset
					ENDIF
				ENDFOR
				IF oForm.Top#lnTop
					oForm.Top=lnTop
				ENDIF
				IF oForm.Left#lnLeft
					oForm.Left=lnLeft
				ENDIF
			ENDIF
		ENDIF
		IF NOT tlNoShow
			this.aForms[this.nFormCount].Show
		ENDIF
		
	ENDPROC

	PROCEDURE dolabel		&& Executes an LBX label
		LPARAMETERS tcFileName,tlPrint
		LOCAL lcFileName
		
		lcFileName=ALLTRIM(tcFileName)
		IF EMPTY(lcFileName)
			RETURN .F.
		ENDIF
		lcFileName=LOWER(FULLPATH(lcFileName))
		IF NOT "."$lcFileName
			lcFileName=lcFileName+".lbx"
		ENDIF
		IF NOT FILE(lcFileName)
			this.FileNotFoundMsgBox(lcFileName)
			RETURN .F.
		ENDIF
		IF tlPrint
			LABEL FORM (lcFileName) TO PRINTER PROMPT
		ELSE
			LABEL FORM (lcFileName) PREVIEW
		ENDIF
		
	ENDPROC

	PROCEDURE domenu		&& Executes an MPR menu.
		LPARAMETERS tcFileName
		LOCAL lcFileName
		lcFileName=ALLTRIM(tcFileName)
		IF EMPTY(lcFileName)
			RETURN .F.
		ENDIF
		lcFileName=LOWER(FULLPATH(lcFileName))
		IF NOT "."$lcFileName
			lcFileName=lcFileName+".mpr"
		ENDIF
		IF NOT FILE(lcFileName)
			this.FileNotFoundMsgBox(lcFileName)
			RETURN .F.
		ENDIF
		DO (lcFileName)
		
	ENDPROC

	PROCEDURE doprogram		&& Executes a PRG, APP, or EXE program.
		LPARAMETERS tcFileName
		LOCAL lcFileName
		
		lcFileName=ALLTRIM(tcFileName)
		IF EMPTY(lcFileName)
			RETURN .F.
		ENDIF
		lcFileName=LOWER(FULLPATH(lcFileName))
		IF NOT "."$lcFileName
			lcFileName=lcFileName+".prg"
		ENDIF
		IF NOT FILE(lcFileName)
			this.FileNotFoundMsgBox(lcFileName)
			RETURN .F.
		ENDIF
		DO (lcFileName)
		
	ENDPROC

	PROCEDURE doreport		&& Executes an FRX report.
		LPARAMETERS tcFileName,tlPrint
		LOCAL lcFileName
		
		lcFileName=ALLTRIM(tcFileName)
		IF EMPTY(lcFileName)
			RETURN .F.
		ENDIF
		lcFileName=LOWER(FULLPATH(lcFileName))
		IF NOT "."$lcFileName
			lcFileName=lcFileName+".frx"
		ENDIF
		IF NOT FILE(lcFileName)
			this.FileNotFoundMsgBox(lcFileName)
			RETURN .F.
		ENDIF
		IF tlPrint
			REPORT FORM (lcFileName) TO PRINTER PROMPT
		ELSE
			REPORT FORM (lcFileName) PREVIEW
		ENDIF
		
	ENDPROC

	PROCEDURE filenotfoundmsgbox		&& Displays a File Not Found messagebox.
		LPARAMETERS tcFileName
		RETURN MESSAGEBOX([File "]+tcFileName+[" not found.],16,MSGTITULO)
		
	ENDPROC

	PROCEDURE form
		LPARAMETERS nform,npara1,npara2,npara3,npara4,npara5,npara6,npara7,npara8,npara9,npara6,npara10
		LOCAL oForm
		*Activate Screen
		If Type('&nform')<>'U' And Isnull(&nform)
		   Release (nform)
		ENDIF
		If Type(nform)<>'O'
		   Public (nform)
		   DO CASE 
		      CASE parameters()<2
		           DO FORM (nform) NAME (nform) LINKED 
		      CASE parameters()<3
		           DO FORM (nform) NAME (nform) LINKED WITH npara1 
		      CASE parameters()<4
		           DO FORM (nform) name(nform) LINKED WITH  npara1,npara2
		      CASE parameters()<5
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3
		      CASE parameters()<6
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4           
		      CASE parameters()<7
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5           
		      CASE parameters()<8
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5,npara6           
		      CASE parameters()<9
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5,npara6,npara7
		      CASE parameters()<10
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5,npara6,npara7,npara8
		      CASE parameters()<11
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5,npara6,npara7,npara8,npara9
		      CASE parameters()<12
		           DO FORM (nform) name(nform) LINKED WITH npara1,npara2,npara3,npara4,npara5,npara6,npara7,npara8,npara9,npara10           
		   ENDCASE           
		ENDIF    
		oForm=Evaluate(nform)
		oForm.WindowState=0
		oForm.Show
		RETURN oForm
	ENDPROC

	PROCEDURE getcaption		&& Returns the caption of the application.
		RETURN this.cCaption
		
	ENDPROC

	PROCEDURE geticon		&& Returns the icon of the application.
		this.icon="\graphics\icono.ico"
		RETURN this.cIcon
		
	ENDPROC

	PROCEDURE ocultarbarra
		this.barra.hide
	ENDPROC

	PROCEDURE onshutdown		&& Occurs when the user attempts to exit Visual FoxPro.
		this.release
		QUIT
		
	ENDPROC

	PROCEDURE readevents		&& Starts read events mode.
		IF this.lReadEvents
			READ EVENTS
		ENDIF
		
	ENDPROC

	PROCEDURE refreshformscollection		&& Refresh forms collection arrays and counters.
		LOCAL lnCount,lnCount2
		
		lnCount=1
		DO WHILE lnCount<=this.nFormCount
			IF TYPE("this.aForms[lnCount]")=="O" AND NOT ISNULL(this.aForms[lnCount])
				lnCount=lnCount+1
				LOOP
			ENDIF
			FOR lnCount2 = lnCount TO (this.nFormCount-1)
				this.aForms[lnCount2]=this.aForms[lnCount2+1]
				this.aForms[lnCount2+1]=.NULL.
				this.aFormNames[lnCount2]=this.aFormNames[lnCount2+1]
				this.aFormNames[lnCount2+1]=""
			ENDFOR
			this.nFormCount=this.nFormCount-1
			IF this.nFormCount=0
				EXIT
			ENDIF
			DIMENSION this.aForms[this.nFormCount],this.aFormNames[this.nFormCount]
		ENDDO
		IF this.nFormCount=0
			this.ResetFormsCollection
		ENDIF
		
	ENDPROC

	PROCEDURE release		&& Releases the application from memory.
		IF NOT this.ReleaseForms()
			RETURN .F.
		ENDIF
		CLOSE ALL 
		thisform.Release()
		this.ClearEvents
		RELEASE this
		
	ENDPROC

	PROCEDURE releaseform		&& Release specifc or active form from memory.
		LPARAMETERS toForm
		iF PARAMETERS()=0
			IF TYPE("_screen.ActiveForm")#"O" OR ISNULL(_screen.ActiveForm)
				RETURN .F.
			ENDIF
			_screen.ActiveForm.Release
		ELSE
			IF TYPE("toForm")#"O" OR ISNULL(toForm)
				RETURN .F.
			ENDIF
			toForm.Release
		ENDIF
		this.RefreshFormsCollection
		
	ENDPROC

	PROCEDURE releaseforms		&& Release all application forms from memory.
		LOCAL lnFormCount
		this.RefreshFormsCollection
		DO WHILE this.nFormCount>0
			lnFormCount=this.nFormCount
			IF NOT this.ReleaseForm(this.aForms[lnFormCount]) OR this.nFormCount=lnFormCount
				RETURN .F.
			ENDIF
		ENDDO
		
	ENDPROC

	PROTECTED PROCEDURE resetformscollection		&& Reset arrays and counters of forms collection.
		this.nFormCount=0
		DIMENSION this.aForms[1],this.aFormNames[1]
		this.aForms=.NULL.
		this.aFormNames=""
		
	ENDPROC

	PROTECTED PROCEDURE restoreenvironment		&& Restores environment settings.
		_screen.Caption="Visual Fox Pro"
		IF NOT EMPTY(this.cLastCaption) AND NOT _screen.Caption==this.cLastCaption
			_screen.Caption="Visual Fox Pro"
		ENDIF
		*IF NOT EMPTY(this.cLastIcon) AND NOT _screen.Icon==this.clastIcon
		*	_screen.Icono=this.clastIcon
		*ENDIF
		
	ENDPROC

	PROCEDURE salida
	ENDPROC

	PROTECTED PROCEDURE saveenvironment		&& Saves environment settings.
		this.cLastCaption=_screen.Caption
		this.cLastIcon=_screen.Icon
		
	ENDPROC

	PROCEDURE show		&& Displays the application.
		LPARAMETERS nStyle
		this.ReadEvents
		DO FORM acceso 
		DO FORM ka_main
	ENDPROC

ENDDEFINE

DEFINE CLASS wzquickstartform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Form2"
	DoCreate = .T.
	Name = "wzquickstartform"

ENDDEFINE
