*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="xpcontrols.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmdlimpiar AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "limpiar"
	Height = 27
	Name = "cmdlimpiar"
	Visible = .F.
	Width = 84
	
	PROCEDURE Click
		WITH thisform
		.txtserie.value=""
		.txtnumero.value=""
		.txtvalor.value=0
		.txtigv.value=0
		.txttotal.value=0
		.txtdscto.value=0
		.txtcodigo.value=""
		.txtruc.value=""
		.txtrazon.value=""
		.txtfono.value=""
		.txtfax.value=""
		.txtporcentaje.value=0
		.txtdireccion.value=""
		.txtciudad.value=""
		.txtencontrado.value=""
		.cmdaceptar.enabled=.f.
		.cmdeliminar.enabled=.f.
		.cmdotro.enabled=.f.
		ENDWITH 
	ENDPROC

ENDDEFINE

DEFINE CLASS controlsourceholder AS checkbox 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: value_assign
	*</DefinedPropArrayMethod>

	Caption = "Check1"
	Height = 17
	Name = "controlsourceholder"
	Width = 60
	
	PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Value = m.vNewVal
		
		this.parent.value=this.value
	ENDPROC

ENDDEFINE

DEFINE CLASS invisiblebutton AS commandbutton 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: havefocus
	*</DefinedPropArrayMethod>

	Caption = ""
	Height = 27
	Name = "invisiblebutton"
	Style = 1
	Width = 84
	
	PROCEDURE GotFocus
		this.havefocus=.t.
	ENDPROC

	PROCEDURE LostFocus
		this.havefocus=.f.
	ENDPROC

ENDDEFINE

DEFINE CLASS invisiblecontainer AS container 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Ismouseout" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkforme		&& place a call to an hidden object who  check the mouse movements over the object
		*m: mousewaitover
		*m: onmouseout
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 60
	Name = "invisiblecontainer"
	Width = 128

	ADD OBJECT 'Ismouseout' AS ismouseout2 WITH ;
		Height = 20, ;
		Left = -25, ;
		Name = "Ismouseout", ;
		Top = 0, ;
		Width = 20
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="timer" />
	
	PROCEDURE checkforme		&& place a call to an hidden object who  check the mouse movements over the object
		LPARAM param1,param2
		this.IsMouseOut.CheckForMe(param1,param2)
	ENDPROC

	PROCEDURE mousewaitover
	ENDPROC

	PROCEDURE onmouseout
	ENDPROC

ENDDEFINE

DEFINE CLASS ismouseout2 AS timer 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: checkforme
		*p: lrepeat
		*p: nbrepeat
		*p: nseconds
		*p: ntimeout
	*</DefinedPropArrayMethod>

	PROTECTED lrepeat,nbrepeat,nseconds,ntimeout
	Enabled = .F.
	Height = 23
	Interval = 50
	Name = "ismouseout2"
	nbrepeat = 0
	nseconds = 0
	ntimeout = 0
	Width = 80
	
	PROCEDURE checkforme
		LParameters nTimeOut, lRepeat
		*--------------------------------
		*	the parent object  must have a OnMouseOut() and
		*	MouseWaitOver() method.
		*	nTimeOut= optionnal, in order to call the "MouseWaitOver()" method 
		*		of the parent, set this value for n milliseconds ie: 1000= 1 second
		*	Repeat
		*	
		*--------------------------------
		
		IF EMPTY(nTimeOut)
			nTimeOut=0
		ENDIF
		
		IF this.lRepeat <> lRepeat OR This.nTimeOut<>nTimeOut/1000
			This.nTimeOut=nTimeOut/1000
			This.nSeconds=Seconds() && seconds since midnight
		ENDIF	
		This.Enabled = .T.
		This.lRepeat=lRepeat
	ENDPROC

	PROCEDURE Timer
		oToCheck=SYS(1270)
		IF type("oToCheck")<> "O" OR This.parent <> oToCheck
			This.parent.OnMouseOut()
			This.nTimeOut=0
			This.nSeconds=0
			This.Enabled = .F.
		ELSE
			*timeout wait over object
			IF this.nTimeOut > 0 AND (seconds() > This.nSeconds+This.nTimeOut)
				IF this.lRepeat
					This.nSeconds=Seconds() && seconds since midnight
				ELSE
					This.nTimeOut=0
					This.nSeconds=0
				ENDIF
				This.parent.MouseWaitOver()
			ENDIF
		ENDIF	
	ENDPROC

ENDDEFINE

DEFINE CLASS progressbar AS container 		&& progressbar with an XP look
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="externalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="midlering" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="internalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Progresspoint25" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: curval_assign		&& automatically update the progress bar.
		*m: myinit		&& This method was called at the beginning of the original (protected) init().
		*m: npercent_assign
		*m: progressupdated		&& This method was called when the npercent value change. So it's a good place to add code that provide feedback off the current progress.
		*m: width_assign		&& the minimal width of this object was 183 pixels. the width can be changed by increments of 25 pixels. The width was automatically adjusted to match this guideline.
		*p: curval		&& The current value to be shown in the control. The control was updated automatically on assign.
		*p: maxval		&& Used if per_cent=.F., this value was the maximum value (100%) of the curval. ie: if maxval was 500 and curval was 200, the progress bar show 40% completion.
		*p: npercent		&& This value was updated at run time to the current % of the progress. You can read it in the ProgressUpdated method to update a label of the current progress.
		*p: per_cent		&& .T. or .F.. If true, the curval value must be between 0 and 100. If false, you must provide the maxval and the curval must be less then the maxval. The progress bar was adjusted accordingly.
	*</DefinedPropArrayMethod>

	PROTECTED ActiveControl,AddObject,AddProperty,BackColor,BackStyle,BorderColor,BorderWidth,ControlCount,Controls,ForeColor,Height,Init,Objects,Picture,RemoveObject,SetAll,SpecialEffect,WriteExpression,WriteMethod
	BackStyle = 0
	BorderWidth = 1
	curval = 0		&& The current value to be shown in the control. The control was updated automatically on assign.
	Height = 16
	maxval = 0		&& Used if per_cent=.F., this value was the maximum value (100%) of the curval. ie: if maxval was 500 and curval was 200, the progress bar show 40% completion.
	Name = "progressbar"
	npercent = -1		&& This value was updated at run time to the current % of the progress. You can read it in the ProgressUpdated method to update a label of the current progress.
	per_cent = .T.		&& .T. or .F.. If true, the curval value must be between 0 and 100. If false, you must provide the maxval and the curval must be less then the maxval. The progress bar was adjusted accordingly.
	Width = 183

	ADD OBJECT 'externalring' AS shape WITH ;
		BackColor = 255,255,255, ;
		BorderColor = 104,104,104, ;
		Curvature = 5, ;
		Height = 14, ;
		Left = 1, ;
		Name = "externalring", ;
		Top = 1, ;
		Width = 181
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'internalring' AS shape WITH ;
		BackColor = 255,255,255, ;
		BorderColor = 239,239,239, ;
		Curvature = 3, ;
		Height = 10, ;
		Left = 4, ;
		Name = "internalring", ;
		Top = 3, ;
		Width = 176
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'midlering' AS shape WITH ;
		BackColor = 255,255,255, ;
		BorderColor = 191,189,192, ;
		Curvature = 4, ;
		Height = 12, ;
		Left = 2, ;
		Name = "midlering", ;
		Top = 2, ;
		Width = 179
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Progresspoint1' AS progresspoint WITH ;
		Left = 5, ;
		Name = "Progresspoint1", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint10' AS progresspoint WITH ;
		Left = 68, ;
		Name = "Progresspoint10", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint11' AS progresspoint WITH ;
		Left = 75, ;
		Name = "Progresspoint11", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint12' AS progresspoint WITH ;
		Left = 82, ;
		Name = "Progresspoint12", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint13' AS progresspoint WITH ;
		Left = 89, ;
		Name = "Progresspoint13", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint14' AS progresspoint WITH ;
		Left = 96, ;
		Name = "Progresspoint14", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint15' AS progresspoint WITH ;
		Left = 103, ;
		Name = "Progresspoint15", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint16' AS progresspoint WITH ;
		Left = 110, ;
		Name = "Progresspoint16", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint17' AS progresspoint WITH ;
		Left = 117, ;
		Name = "Progresspoint17", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint18' AS progresspoint WITH ;
		Left = 124, ;
		Name = "Progresspoint18", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint19' AS progresspoint WITH ;
		Left = 131, ;
		Name = "Progresspoint19", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint2' AS progresspoint WITH ;
		Left = 12, ;
		Name = "Progresspoint2", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint20' AS progresspoint WITH ;
		Left = 138, ;
		Name = "Progresspoint20", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint21' AS progresspoint WITH ;
		Left = 145, ;
		Name = "Progresspoint21", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint22' AS progresspoint WITH ;
		Left = 152, ;
		Name = "Progresspoint22", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint23' AS progresspoint WITH ;
		Left = 159, ;
		Name = "Progresspoint23", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint24' AS progresspoint WITH ;
		Left = 166, ;
		Name = "Progresspoint24", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint25' AS progresspoint WITH ;
		Left = 173, ;
		Name = "Progresspoint25", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint3' AS progresspoint WITH ;
		Left = 19, ;
		Name = "Progresspoint3", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint4' AS progresspoint WITH ;
		Left = 26, ;
		Name = "Progresspoint4", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint5' AS progresspoint WITH ;
		Left = 33, ;
		Name = "Progresspoint5", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint6' AS progresspoint WITH ;
		Left = 40, ;
		Name = "Progresspoint6", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint7' AS progresspoint WITH ;
		Left = 47, ;
		Name = "Progresspoint7", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint8' AS progresspoint WITH ;
		Left = 54, ;
		Name = "Progresspoint8", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Progresspoint9' AS progresspoint WITH ;
		Left = 61, ;
		Name = "Progresspoint9", ;
		Top = 4, ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		Line6.Name = "Line6", ;
		Line7.Name = "Line7"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />
	
	PROTECTED PROCEDURE curval_assign		&& automatically update the progress bar.
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.curval = m.vNewVal
		
		local nDots,i,cDot
		
		if this.per_cent
			this.curval=min(100,this.curval)
			this.npercent=this.curval
			nDots=INT(this.curval/4)
		else
			this.curval=min(this.maxval,this.curval)
			this.npercent=INT(this.curval*100/this.maxval)
			nDots=INT(this.nPercent/4)
		endif
		
		FOR i = 1 TO 25
			cDot="this.ProgressPoint"+ALLTRIM(STR(i))
			if i > nDots
				&cDot..visible=.F.
			else
				&cDot..visible=.T.
			endif	
		ENDFOR
		
	ENDPROC

	PROTECTED PROCEDURE Init
		this.myInit()
		this.width=this.width
		this.borderwidth=0
		this.curval=this.curval
		
	ENDPROC

	PROCEDURE myinit		&& This method was called at the beginning of the original (protected) init().
	ENDPROC

	HIDDEN PROCEDURE npercent_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		if this.npercent <> vNewVal
			THIS.npercent = m.vNewVal
			this.ProgressUpdated()
		endif
		
		
	ENDPROC

	PROCEDURE progressupdated		&& This method was called when the npercent value change. So it's a good place to add code that provide feedback off the current progress.
	ENDPROC

	HIDDEN PROCEDURE width_assign		&& the minimal width of this object was 183 pixels. the width can be changed by increments of 25 pixels. The width was automatically adjusted to match this guideline.
		LPARAMETERS vNewVal
		local nMinimalWidth,nTmpWidth,nLeftpos,nDist,i,cDot
		nMinimalWidth=183  && hardcoded width for optimal display
		DO CASE
			CASE vNewVal < nMinimalWidth
				this.Width=183
			CASE this.Width = nMinimalWidth
				*nothing to do
				this.width=vNewVal
			OTHERWISE  && > nMinimalWidth
				nTmpWidth=vNewVal-nMinimalWidth
				IF nTmpWidth%25 > 0
					*rounding up (base 25)
					nTmpWidth=(INT(nTmpWidth/25)+1)*25
				ENDIF
				this.width=nMinimalWidth+nTmpWidth
				*initial distance between lefts of dots = 7
				*initial width of dots = 5
				*initial left for the first dot = 5
				*how many times we add 25 px
				nDist=nTmpWidth/25
				nLeftPos=5
				FOR i = 1 TO 25
					cDot="this.ProgressPoint"+ALLTRIM(STR(i))
					&cDot..width=5+nDist
					&cDot..Left=nLeftPos
					nLeftPos=nLeftPos+7+nDist
				ENDFOR
				this.externalRing.width=this.width-2
				this.midleRing.width=this.width-4
				this.internalRing.width=this.width-7
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS progresspoint AS container 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line7" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: width_assign
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	Height = 7
	Name = "progresspoint"
	Visible = .F.
	Width = 5

	ADD OBJECT 'Line1' AS line WITH ;
		BorderColor = 171,238,171, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 0, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		BorderColor = 125,227,125, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line2", ;
		Top = 1, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line3' AS line WITH ;
		BorderColor = 77,218,80, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line3", ;
		Top = 2, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line4' AS line WITH ;
		BorderColor = 45,211,49, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line4", ;
		Top = 3, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line5' AS line WITH ;
		BorderColor = 66,216,69, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line5", ;
		Top = 4, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line6' AS line WITH ;
		BorderColor = 117,226,119, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line6", ;
		Top = 5, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line7' AS line WITH ;
		BorderColor = 142,230,144, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line7", ;
		Top = 6, ;
		Width = 5
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE width_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Width = m.vNewVal
		this.line1.width=this.width
		this.line2.width=this.width
		this.line3.width=this.width
		this.line4.width=this.width
		this.line5.width=this.width
		this.line6.width=this.width
		this.line7.width=this.width
	ENDPROC

ENDDEFINE

DEFINE CLASS tooltiplabel AS label 		&& used by xpclasses - do not use, but keep in the lib
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: hide		&& Hides a Form, FormSet, or ToolBar by setting the Visible property to false (.F.).
		*m: show		&& Displays a Form and specifies if the Form is modal or modeless.
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	BackColor = 254,255,210
	BorderStyle = 1
	Caption = "Label1"
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "tooltiplabel"
	Visible = .F.
	Width = 33
	
	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		vNewVal=" "+ALLTRIM(vNewval)+" "
		THIS.Caption = m.vNewVal
		
	ENDPROC

	PROCEDURE hide		&& Hides a Form, FormSet, or ToolBar by setting the Visible property to false (.F.).
		this.visible=.f.
	ENDPROC

	PROCEDURE show		&& Displays a Form and specifies if the Form is modal or modeless.
		LPARAMETERS cCaption
		this.caption=cCaption
		if mCol(thisform.name,3)+this.width > thisform.width
			this.left=max(1,mCol(thisform.name,3)- this.width)
			this.top=mRow(thisform.name,3)+17
		else
			this.left=mCol(thisform.name,3)-3
			this.top=mRow(thisform.name,3)+17
		endif	
		this.visible=.t.
	ENDPROC

ENDDEFINE

DEFINE CLASS xpcheckbox AS container 		&& Checkbox with an XP look
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Controlsourceholder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="background" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Invisiblebutton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checklabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="externalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="internalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checkmark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="NullMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checker" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: enabled_assign
		*m: readonly_assign
		*m: value_assign
		*p: canbenull		&& IF .T., 3 states checkbox, values: 0,1,.NULL. OR .F.,.T.,.NULL.. Otherwise, 2 states check box, values: 0,1 OR .F.,.T. and .NULL. generate errors.
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: controlsource		&& Specifies the source of data to which an object is bound.
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	PROTECTED Height,RemoveObject
	BackColor = 255,255,255
	BackStyle = 0
	BorderWidth = 0
	caption = XP - checkbox label		&& Specifies the text displayed in an object's caption.
	controlsource = 		&& Specifies the source of data to which an object is bound.
	Height = 17
	Name = "xpcheckbox"
	tooltiptext = 		&& Specifies the text that appears as a ToolTip for a control.
	Width = 140

	ADD OBJECT 'background' AS shape WITH ;
		BackColor = 255,255,255, ;
		BorderColor = 0,0,64, ;
		BorderWidth = 0, ;
		Curvature = 0, ;
		Height = 16, ;
		Left = 1, ;
		Name = "background", ;
		Top = 1, ;
		Width = 16
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'checker' AS invisiblecontainer WITH ;
		Height = 16, ;
		Left = 1, ;
		Name = "checker", ;
		Top = 1, ;
		Width = 136, ;
		ISMOUSEOUT.Name = "ISMOUSEOUT"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'checklabel' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "XP - checkbox label", ;
		FontName = "Tahoma", ;
		Height = 16, ;
		Left = 25, ;
		Name = "checklabel", ;
		Top = 1, ;
		Width = 108
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'checkmark' AS label WITH ;
		BackStyle = 0, ;
		Caption = "a", ;
		FontName = "Webdings", ;
		FontSize = 12, ;
		ForeColor = 0,128,0, ;
		Height = 16, ;
		Left = 2, ;
		Name = "checkmark", ;
		Top = -1, ;
		Width = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Controlsourceholder' AS controlsourceholder WITH ;
		Left = 60, ;
		Name = "Controlsourceholder", ;
		TabStop = .F., ;
		Top = -50, ;
		Value = .F.
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'externalring' AS shape WITH ;
		BackColor = 192,192,192, ;
		BackStyle = 0, ;
		BorderColor = 0,0,64, ;
		Curvature = 0, ;
		Height = 16, ;
		Left = 1, ;
		Name = "externalring", ;
		Top = 1, ;
		Width = 16
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'internalring' AS shape WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 0, ;
		BorderColor = 255,185,121, ;
		Curvature = 0, ;
		Height = 14, ;
		Left = 2, ;
		Name = "internalring", ;
		Top = 2, ;
		Visible = .F., ;
		Width = 14
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Invisiblebutton' AS invisiblebutton WITH ;
		Height = 16, ;
		Left = 22, ;
		Name = "Invisiblebutton", ;
		Top = 1, ;
		Width = 114
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Line1' AS line WITH ;
		BorderColor = 208,208,208, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line1", ;
		Top = 2, ;
		Width = 14
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		BorderColor = 216,216,216, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line2", ;
		Top = 3, ;
		Width = 14
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line3' AS line WITH ;
		BorderColor = 224,224,224, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line3", ;
		Top = 4, ;
		Width = 14
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line4' AS line WITH ;
		BorderColor = 232,232,232, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line4", ;
		Top = 5, ;
		Width = 12
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line5' AS line WITH ;
		BorderColor = 240,240,240, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line5", ;
		Top = 6, ;
		Width = 8
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'NullMark' AS shape WITH ;
		BackColor = 0,64,0, ;
		BorderColor = 0,0,64, ;
		BorderWidth = 0, ;
		Curvature = 0, ;
		Height = 8, ;
		Left = 5, ;
		Name = "NullMark", ;
		Top = 5, ;
		Visible = .F., ;
		Width = 8
		*< END OBJECT: BaseClass="shape" />
	
	HIDDEN PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		WITH this
			.caption = m.vNewVal
			.checklabel.caption=m.vNewVal
			.checklabel.visible=.t.
			.width=.checklabel.width+.checklabel.left+2
			.invisibleButton.width=.checklabel.width+2
			.checker.width=.width
		ENDWITH
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		with this
			.invisiblebutton.enabled=.enabled
			.checker.enabled=.enabled
			.checklabel.forecolor=iif(.enabled,rgb(0,0,0),rgb(161,161,146))
			.externalring.bordercolor=iif(.enabled and !.readonly,rgb(0,0,0),rgb(161,161,146))
			.checkmark.forecolor=iif(.enabled,rgb(0,128,0),rgb(161,161,146))
			.Nullmark.backcolor=iif(.enabled,rgb(0,128,0),rgb(161,161,146))
		endwith
	ENDPROC

	PROCEDURE Init
		this.caption=this.caption
		this.enabled=this.enabled
		this.ControlSourceHolder.controlSource=this.controlsource
		this.ControlSourceHolder.refresh()
		*!*	if type("thisform.ismouseout")<>"O"
		*!*		cLib=this.classlibrary
		*!*		SET CLASSLIB TO &cLib ADDI
		*!*		thisform.addobject("ismouseout","ismouseout")
		*!*		CLEAR CLASSLIB &cLib
		*!*	endif
		if type("thisform.tooltiplabel")<>"O"
			cLib=this.classlibrary
			SET CLASSLIB TO &cLib ADDI
			thisform.addobject("tooltiplabel","tooltiplabel")
			CLEAR CLASSLIB &cLib
		endif
		if this.controlsourceholder.value<>this.value
			this.controlsourceholder.value=this.value
		endif	
	ENDPROC

	HIDDEN PROCEDURE readonly_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.readonly = m.vNewVal
		with this
			.externalring.bordercolor=iif(.enabled and !.readonly,rgb(0,0,0),rgb(161,161,146))
		endwith
	ENDPROC

	PROCEDURE Refresh
		this.ControlSourceHolder.refresh()
	ENDPROC

	HIDDEN PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		DO CASE
			CASE ISNULL(vNewVal)
				this.nullMark.visible=.T.
				this.checkMark.visible=.F.
			CASE TYPE("vNewVal")="N"
				vNewVal=IIF(vNewVal=0,0,1)
				this.checkMark.visible=(vNewVal=1)
				this.nullMark.visible=.F.
			OTHERWISE
				vNewVal=IIF(TYPE("vNewVal")="L",vNewVal,.F.)
				this.checkMark.visible=vNewVal
				this.nullMark.visible=.F.
		ENDCASE
		
		THIS.value = vNewVal
		if this.controlsourceholder.value<>this.value
			this.controlsourceholder.value=this.value
		endif
		
		
	ENDPROC

	PROCEDURE checker.Click
		with this.parent
		IF  !.readonly
			IF .CanBeNull
				IF TYPE(".ControlSourceHolder.value")="N"
					.ControlSourceHolder.value=IIF(ISNULL(.ControlSourceHolder.value),0,IIF(.ControlSourceHolder.value=0,1,.NULL.))
					.checkMark.visible=!ISNULL(.ControlSourceHolder.value) AND (.ControlSourceHolder.value=1)
					.nullMark.visible=ISNULL(.ControlSourceHolder.value)
				ELSE
					.ControlSourceHolder.value=IIF(ISNULL(.ControlSourceHolder.value),.F.,IIF(!.ControlSourceHolder.value,.T.,.NULL.))
					.checkMark.visible=!ISNULL(.ControlSourceHolder.value) AND .value
					.nullMark.visible=ISNULL(.ControlSourceHolder.value)
				ENDIF
			ELSE
				IF TYPE(".ControlSourceHolder.value")="N"
					.ControlSourceHolder.value=IIF(.ControlSourceHolder.value=1,0,1)
					.checkMark.visible=(.ControlSourceHolder.value=1)
					.nullMark.visible=ISNULL(.ControlSourceHolder.value)			
				ELSE
					.ControlSourceHolder.value=!.ControlSourceHolder.value
					.checkMark.visible=.ControlSourceHolder.value
					.nullMark.visible=ISNULL(.ControlSourceHolder.value)			
				ENDIF
			ENDIF
		ENDIF	
		endwith	
	ENDPROC

	PROCEDURE checker.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled and !this.parent.readonly
			this.parent.externalring.backstyle=1
		endif	
	ENDPROC

	PROCEDURE checker.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled
			this.checkforme(500)
			IF  !this.parent.readonly
				this.parent.invisiblebutton.setfocus()
			ENDIF	
		endif	
		
	ENDPROC

	PROCEDURE checker.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.parent.externalring.backstyle=0
	ENDPROC

	PROCEDURE checker.mousewaitover
		if thisform.showtips and !empty(this.parent.tooltiptext)
			thisform.tooltiplabel.show(this.parent.tooltiptext)
		endif	
	ENDPROC

	PROCEDURE checker.onmouseout
		if !this.parent.invisiblebutton.havefocus and this.enabled and !this.parent.readonly
			this.parent.internalRing.visible=.f.
		endif	
		if thisform.tooltiplabel.visible
			thisform.tooltiplabel.hide()
		endif	
	ENDPROC

	PROCEDURE checkmark.Init
		WITH this.parent
			IF TYPE(".value")="N"
				this.visible=!ISNULL(.value) AND (.value=1)
			ELSE
				this.visible=!ISNULL(.value) AND .value
			ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE Invisiblebutton.GotFocus
		IF  !this.parent.readonly
			this.parent.internalring.visible=.t.
			dodefault()
		ENDIF	
	ENDPROC

	PROCEDURE Invisiblebutton.LostFocus
		this.parent.internalring.visible=.f.
		dodefault()
	ENDPROC

	PROCEDURE Invisiblebutton.Valid
		this.parent.checker.click()
	ENDPROC

	PROCEDURE Invisiblebutton.When
		return !this.parent.readonly
	ENDPROC

	PROCEDURE NullMark.Init
		this.visible=ISNULL(this.parent.value)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xpcommandbutton AS container 		&& CommandButton with an XP look
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="background" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Invisiblebutton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="internalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="externalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdlabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checker" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: enabled_assign
		*p: cancel		&& Specifies if a CommandButton is the Cancel button.
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: default		&& Specifies which CommandButton responds to the ENTER key being pressed.
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
	*</DefinedPropArrayMethod>

	PROTECTED Height,RemoveObject
	BackColor = 255,255,255
	BackStyle = 0
	BorderWidth = 1
	caption = Click		&& Specifies the text displayed in an object's caption.
	Height = 24
	Name = "xpcommandbutton"
	tooltiptext = 		&& Specifies the text that appears as a ToolTip for a control.
	Width = 76

	ADD OBJECT 'background' AS shape WITH ;
		BackColor = 236,237,232, ;
		BorderColor = 0,0,64, ;
		BorderWidth = 0, ;
		Curvature = 5, ;
		Height = 23, ;
		Left = 1, ;
		Name = "background", ;
		Top = 1, ;
		Width = 75
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'checker' AS invisiblecontainer WITH ;
		Height = 23, ;
		Left = 1, ;
		Name = "checker", ;
		Top = 1, ;
		Width = 75, ;
		ISMOUSEOUT.Name = "ISMOUSEOUT"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cmdlabel' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Click", ;
		FontName = "Tahoma", ;
		Height = 16, ;
		Left = 1, ;
		Name = "cmdlabel", ;
		Top = 4, ;
		Width = 25
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'externalring' AS shape WITH ;
		BackColor = 218,218,210, ;
		BackStyle = 0, ;
		BorderColor = 0,0,64, ;
		Curvature = 5, ;
		Height = 23, ;
		Left = 1, ;
		Name = "externalring", ;
		Top = 1, ;
		Width = 75
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'internalring' AS shape WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 0, ;
		BorderColor = 250,191,73, ;
		BorderWidth = 1, ;
		Curvature = 5, ;
		Height = 19, ;
		Left = 2, ;
		Name = "internalring", ;
		Top = 3, ;
		Visible = .F., ;
		Width = 72
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Invisiblebutton' AS invisiblebutton WITH ;
		Height = 23, ;
		Left = 1, ;
		Name = "Invisiblebutton", ;
		Top = 1, ;
		Width = 75
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Line1' AS line WITH ;
		BorderColor = 255,255,255, ;
		BorderWidth = 2, ;
		Height = 0, ;
		Left = 4, ;
		Name = "Line1", ;
		Top = 2, ;
		Width = 75
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		BorderColor = 228,230,222, ;
		BorderWidth = 3, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line2", ;
		Top = 4, ;
		Width = 75
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line3' AS line WITH ;
		BorderColor = 218,214,202, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 2, ;
		Name = "Line3", ;
		Top = 20, ;
		Width = 75
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line4' AS line WITH ;
		BorderColor = 200,190,180, ;
		BorderWidth = 2, ;
		Height = 0, ;
		Left = 4, ;
		Name = "Line4", ;
		Top = 22, ;
		Width = 75
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line5' AS line WITH ;
		BorderColor = 240,240,234, ;
		BorderWidth = 2, ;
		Height = 16, ;
		Left = 3, ;
		Name = "Line5", ;
		Top = 4, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line6' AS line WITH ;
		BorderColor = 230,224,216, ;
		BorderWidth = 2, ;
		Height = 16, ;
		Left = 73, ;
		Name = "Line6", ;
		Top = 4, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />
	
	HIDDEN PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		WITH this
			.caption = m.vNewVal
			.cmdlabel.caption=m.vNewVal
			.cmdlabel.visible=.t.
		ENDWITH
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		with this
			.invisiblebutton.enabled=.enabled
			.cmdlabel.forecolor=iif(.enabled,rgb(0,0,0),rgb(161,161,146))
			.externalring.bordercolor=iif(.enabled ,rgb(0,0,0),rgb(161,161,146))
			.background.backcolor=iif(.enabled ,rgb(236,237,232),rgb(240,238,226))
			.line1.visible=.enabled
			.line2.visible=.enabled
			.line3.visible=.enabled
			.line4.visible=.enabled
			.line5.visible=.enabled
			.line6.visible=.enabled
			.checker.enabled=.enabled
		endwith
	ENDPROC

	PROCEDURE Init
		this.caption=this.caption
		this.enabled=this.enabled
		this.invisiblebutton.default=this.default
		this.invisiblebutton.cancel=this.cancel
		*!*	if type("thisform.ismouseout")<>"O"
		*!*		cLib=this.classlibrary
		*!*		SET CLASSLIB TO &cLib ADDI
		*!*		thisform.addobject("ismouseout","ismouseout")
		*!*		CLEAR CLASSLIB &cLib
		*!*	endif
		if type("thisform.tooltiplabel")<>"O"
			cLib=this.classlibrary
			SET CLASSLIB TO &cLib ADDI
			thisform.addobject("tooltiplabel","tooltiplabel")
			CLEAR CLASSLIB &cLib
		endif
		this.borderwidth=0
		this.checker.width=this.width-1
		this.cmdlabel.width=this.width-1
		this.invisibleButton.width=this.width-1
		this.externalring.width=this.width-1
		this.background.width=this.width-1
		this.line1.width=this.width-7
		this.line2.width=this.width-3
		this.line3.width=this.width-3
		this.line4.width=this.width-7
		this.line6.left=this.width-3
		if this.default
			this.line1.bordercolor=rgb(202,229,250)
			this.line4.bordercolor=rgb(85,11,234)
		endif
		this.internalring.width=this.width-3
	ENDPROC

	PROCEDURE checker.Click
		this.parent.click()
	ENDPROC

	PROCEDURE checker.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled
			with this.parent
				.background.backcolor=rgb(222,219,212)
				.line1.top=22
				.line2.top=20
				.line3.top=4
				.line4.top=2
				.line5.left=.width-3
				.line6.left=3
				.line1.bordercolor=rgb(255,255,255)
				.line4.bordercolor=rgb(200,190,180)
				.internalring.visible=.f.
			endwith	
		endif	
	ENDPROC

	PROCEDURE checker.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled
			this.checkforme(500)
			this.parent.invisiblebutton.setfocus()
		endif	
		
	ENDPROC

	PROCEDURE checker.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		with this.parent
			.background.backcolor=rgb(236,237,232)
			.line1.top=2
			.line2.top=4
			.line3.top=20
			.line4.top=22
			.line5.left=3
			.line6.left=.width-3
			.line1.bordercolor=rgb(250,240,201)
			.line4.bordercolor=rgb(227,135,0)
			.internalring.visible=.t.
		endwith	
		
	ENDPROC

	PROCEDURE checker.mousewaitover
		if thisform.showtips and !empty(this.parent.tooltiptext)
			thisform.tooltiplabel.show(this.parent.tooltiptext)
		endif	
	ENDPROC

	PROCEDURE checker.onmouseout
		if !this.parent.invisiblebutton.havefocus and this.enabled
			if this.parent.default
				this.parent.internalRing.bordercolor=rgb(174,202,242)
				this.parent.internalRing.visible=.t.
			else
				this.parent.internalRing.bordercolor=rgb(255,185,121)
				this.parent.internalRing.visible=.f.
			endif	
		endif	
		
		if thisform.tooltiplabel.visible
			thisform.tooltiplabel.hide()
		endif	
	ENDPROC

	PROCEDURE internalring.Init
		if this.parent.default
			this.bordercolor=rgb(143,176,230)
			this.visible=.t.
		else
			this.bordercolor=rgb(255,185,121)
			this.visible=.f.
		endif	
	ENDPROC

	PROCEDURE Invisiblebutton.GotFocus
		this.parent.internalRing.bordercolor=rgb(250,191,73)
		this.parent.line1.bordercolor=rgb(250,240,201)
		this.parent.line4.bordercolor=rgb(227,135,0)
		this.parent.internalring.visible=.t.
		dodefault()
		
	ENDPROC

	PROCEDURE Invisiblebutton.LostFocus
		if this.parent.default
			this.parent.internalRing.bordercolor=rgb(143,176,230)
			this.parent.line1.bordercolor=rgb(202,229,250)
			this.parent.line4.bordercolor=rgb(85,11,234)
			this.parent.internalRing.visible=.t.
		else
			this.parent.internalRing.bordercolor=rgb(255,185,121)
			this.parent.line1.bordercolor=rgb(255,255,255)
			this.parent.line4.bordercolor=rgb(200,190,180)
			this.parent.internalRing.visible=.f.
		endif	
		dodefault()
	ENDPROC

	PROCEDURE Invisiblebutton.Valid
		this.parent.checker.mousedown()
		this.parent.checker.click()
		this.parent.checker.mouseup()
	ENDPROC

ENDDEFINE

DEFINE CLASS xpgroupingbox AS container 		&& Container with title and border - XP look
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="BorderBox" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BoxCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: enabled_assign
		*m: readonly_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 216
	Name = "xpgroupingbox"
	Width = 280

	ADD OBJECT 'BorderBox' AS shape WITH ;
		BackStyle = 0, ;
		BorderColor = 161,161,146, ;
		Curvature = 10, ;
		Height = 203, ;
		Left = 2, ;
		Name = "BorderBox", ;
		Top = 11, ;
		Width = 276
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'BoxCaption' AS label WITH ;
		AutoSize = .T., ;
		Caption = " xp Group box ", ;
		DisabledForeColor = 161,161,146, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,70,213, ;
		Height = 15, ;
		Left = 10, ;
		Name = "BoxCaption", ;
		Top = 3, ;
		Width = 73
		*< END OBJECT: BaseClass="label" />
	
	HIDDEN PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Caption = m.vNewVal
		this.boxCaption.caption=" "+ALLTRIM(vNewVal)+" "
		this.boxCaption.backcolor=this.parent.backcolor
		this.boxCaption.visible=.t.
		
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		FOR i = 1 to this.controlcount
			if this.controls(i) <> this.BoxCaption
				this.controls(i).enabled=vNewVal
			endif	
		ENDFOR
		this.BoxCaption.forecolor=iif(this.enabled,rgb(0,70,213),rgb(161,161,146))
		
	ENDPROC

	PROCEDURE Init
		this.readonly=this.readonly
		this.enabled=this.enabled
		this.caption=this.caption
		this.borderbox.left=1
		this.borderbox.top=11
		this.borderbox.width=this.width-2
		this.borderbox.height=this.height-12
		this.borderwidth=0
		
	ENDPROC

	HIDDEN PROCEDURE readonly_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.readonly = m.vNewVal
		FOR i = 1 to this.controlcount
			IF PEMSTATUS(this.controls(i),"readonly",5)
				this.controls(i).readonly=vNewVal
			ENDIF
		ENDFOR
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xphottext AS container 		&& CommandButton with an XP look
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdlabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checker" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: createcursor		&& create the hand mouse cursor if autocursor=.t.
		*m: enabled_assign
		*m: myinit		&& Replacement for the protected Init() event. This method was called at the beginning of the init().
		*p: autocursor		&& if .t. create the mouse cursor file on the disk. The cursor look the same as the one you can see in IE (hand).
		*p: autosize		&& Specifies if a control is automatically resized to fit its contents.
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: cursorfile		&& If you want to use your own mouse cursor you must entrer its name and path here.
		*p: hot		&& React to the mouse over event
		*p: hotcolor		&& RGB value for the hot text color (mouse over)  format: 255,255,255. The normal color was set on the forecolor prop.
		*p: hotunderline		&& 0: never underline, 1: underline on mouse over (default), 2: always underline
		*p: href		&& href called for a click. ie: mailto:name@server.com or http://mysite.com
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
		*p: wordwrap		&& Specifies if a Label control with its AutoSize property set to true (.T.) expands vertically or horizontally.
	*</DefinedPropArrayMethod>

	PROTECTED Init,RemoveObject
	autocursor = .T.		&& if .t. create the mouse cursor file on the disk. The cursor look the same as the one you can see in IE (hand).
	autosize = .T.		&& Specifies if a control is automatically resized to fit its contents.
	BackColor = 255,255,255
	BackStyle = 0
	BorderWidth = 1
	caption = hot text		&& Specifies the text displayed in an object's caption.
	cursorfile = 		&& If you want to use your own mouse cursor you must entrer its name and path here.
	Height = 16
	hot = .T.		&& React to the mouse over event
	hotcolor = 64,64,196		&& RGB value for the hot text color (mouse over)  format: 255,255,255. The normal color was set on the forecolor prop.
	hotunderline = 1		&& 0: never underline, 1: underline on mouse over (default), 2: always underline
	href = 		&& href called for a click. ie: mailto:name@server.com or http://mysite.com
	Name = "xphottext"
	tooltiptext = 		&& Specifies the text that appears as a ToolTip for a control.
	Width = 76
	wordwrap = .F.		&& Specifies if a Label control with its AutoSize property set to true (.T.) expands vertically or horizontally.

	ADD OBJECT 'checker' AS invisiblecontainer WITH ;
		Height = 13, ;
		Left = 0, ;
		Name = "checker", ;
		Top = 0, ;
		Width = 74, ;
		ISMOUSEOUT.Name = "ISMOUSEOUT"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cmdlabel' AS label WITH ;
		BackStyle = 0, ;
		Caption = "hot text", ;
		FontName = "Tahoma", ;
		Height = 16, ;
		Left = 0, ;
		Name = "cmdlabel", ;
		Top = 0, ;
		Width = 60
		*< END OBJECT: BaseClass="label" />
	
	HIDDEN PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		WITH this
			.caption = m.vNewVal
			.cmdlabel.caption=m.vNewVal
			.cmdlabel.visible=.t.
			.width=.cmdlabel.width+1
			.height=.cmdlabel.height+1
			.checker.height=.cmdlabel.height
			.checker.width=.cmdlabel.width
		ENDWITH
	ENDPROC

	PROTECTED PROCEDURE createcursor		&& create the hand mouse cursor if autocursor=.t.
		cursorFile=CHR(0)+CHR(0)+CHR(2)+CHR(0)+CHR(1)+CHR(0)+CHR(32)+CHR(32);
			+CHR(2)+CHR(0)+CHR(5)+CHR(0)+CHR(0)+CHR(0)+"0"+CHR(1);
			+CHR(0)+CHR(0)+CHR(22)+CHR(0)+CHR(0)+CHR(0)+CHR(40)+CHR(0);
			+CHR(0)+CHR(0)+CHR(32)+CHR(0)+CHR(0)+CHR(0)+"@"+CHR(0);
			+CHR(0)+CHR(0)+CHR(1)+CHR(0)+CHR(1)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(1)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(2)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(255)+CHR(255)+CHR(255)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(3)+CHR(252)+CHR(0)+CHR(0)+CHR(3)+CHR(252);
			+CHR(0)+CHR(0)+CHR(7)+CHR(254)+CHR(0)+CHR(0)+CHR(7)+CHR(254);
			+CHR(0)+CHR(0)+CHR(15)+CHR(254)+CHR(0)+CHR(0)+CHR(15)+CHR(255);
			+CHR(0)+CHR(0)+CHR(31)+CHR(255)+CHR(0)+CHR(0)+CHR(31)+CHR(255);
			+CHR(0)+CHR(0)+"7"+CHR(255)+CHR(0)+CHR(0)+"w"+CHR(255)+CHR(0);
			+CHR(0)+"g"+CHR(251)+CHR(0)+CHR(0)+CHR(6)+CHR(219)+CHR(0);
			+CHR(0)+CHR(6)+CHR(218)+CHR(0)+CHR(0)+CHR(6)+CHR(216)+CHR(0);
			+CHR(0)+CHR(6)+CHR(192)+CHR(0)+CHR(0)+CHR(6)+CHR(0)+CHR(0);
			+CHR(0)+CHR(6)+CHR(0)+CHR(0)+CHR(0)+CHR(6)+CHR(0)+CHR(0);
			+CHR(0)+CHR(6)+CHR(0)+CHR(0)+CHR(0)+CHR(6)+CHR(0)+CHR(0);
			+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(0)+CHR(255)+CHR(255)+CHR(255);
			+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255);
			+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255);
			+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255);
			+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255);
			+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(255)+CHR(248)+CHR(1)+CHR(255);
			+CHR(255)+CHR(248)+CHR(1)+CHR(255)+CHR(255)+CHR(248)+CHR(1)+CHR(255);
			+CHR(255)+CHR(240)+CHR(0)+CHR(255)+CHR(255)+CHR(240)+CHR(0)+CHR(255);
			+CHR(255)+CHR(224)+CHR(0)+CHR(255)+CHR(255)+CHR(224)+CHR(0)+CHR(127);
			+CHR(255)+CHR(192)+CHR(0)+CHR(127)+CHR(255)+CHR(192)+CHR(0)+CHR(127);
			+CHR(255)+CHR(128)+CHR(0)+CHR(127)+CHR(255)+CHR(0)+CHR(0)+CHR(127);
			+CHR(255)+CHR(0)+CHR(0)+CHR(127)+CHR(255)+CHR(16)+CHR(0)+CHR(127);
			+CHR(255)+CHR(240)+CHR(0)+CHR(255)+CHR(255)+CHR(240)+CHR(1)+CHR(255);
			+CHR(255)+CHR(240)+CHR(7)+CHR(255)+CHR(255)+CHR(240)+"?"+CHR(255);
			+CHR(255)+CHR(240)+CHR(255)+CHR(255)+CHR(255)+CHR(240)+CHR(255)+CHR(255);
			+CHR(255)+CHR(240)+CHR(255)+CHR(255)+CHR(255)+CHR(240)+CHR(255)+CHR(255);
			+CHR(255)+CHR(249)+CHR(255)+CHR(255)+CHR(255)
			
		STRTOFILE(cursorFile,"link.cur")	
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		with this
			.cmdlabel.forecolor=iif(.enabled,this.forecolor,rgb(161,161,146))
			.checker.enabled=.enabled
		endwith
	ENDPROC

	PROTECTED PROCEDURE Init
		this.myInit()
		
		if type("thisform.tooltiplabel")<>"O"
			cLib=this.classlibrary
			SET CLASSLIB TO &cLib ADDI
			thisform.addobject("tooltiplabel","tooltiplabel")
			CLEAR CLASSLIB &cLib
		endif
		if this.autocursor and !file("link.cur")
			this.createcursor()
		endif
		if this.autocursor
			this.cursorfile="link.cur"
		endif
		this.borderwidth=0
		this.cmdlabel.wordwrap=this.wordwrap
		if !this.wordwrap
			this.cmdlabel.autosize=this.autosize
		else
			this.cmdlabel.autosize=.f.
		endif	
		this.checker.width=this.width-1
		this.checker.height=this.height-1
		this.cmdlabel.width=this.width-1
		this.cmdlabel.height=this.height-1
		this.caption=this.caption
		this.enabled=this.enabled
		this.cmdlabel.FontUnderline=(this.hotunderline=2)
	ENDPROC

	PROCEDURE myinit		&& Replacement for the protected Init() event. This method was called at the beginning of the init().
	ENDPROC

	PROCEDURE checker.Click
		
		if this.enabled and this.parent.hot and !empty(this.parent.href)
			DECLARE INTEGER ShellExecute ;
				IN SHELL32.DLL ;
				INTEGER nWinHandle, ;
				STRING cOperation, ;
				STRING cFileName, ;
				STRING cParameters, ;
				STRING cDirectory, ;
				INTEGER nShowWindow
			**vfp main windows handle
			DECLARE INTEGER FindWindow ;
				IN WIN32API ;
				STRING cNull, ;
				STRING cWinName
			
			URL=this.parent.href
			cDir=sys(5)+sys(2003)+"\"
			
			z=ShellExecute(FindWindow( 0, _SCREEN.CAPTION), "Open", URL, "", cDir, 1)
		ENDIF
		
		
		
		this.parent.click()
	ENDPROC

	PROCEDURE checker.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled and this.parent.hot
			this.parent.cmdlabel.forecolor=this.parent.forecolor
		endif
	ENDPROC

	PROCEDURE checker.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled and this.parent.hot
			this.checkforme(500)
			this.parent.cmdlabel.forecolor=EVAL("rgb("+this.parent.hotcolor+")")
			this.parent.cmdlabel.FontUnderline= this.parent.hotunderline > 0
			if !empty(this.parent.cursorfile) and file(this.parent.cursorfile)
				this.mousepointer=99
				this.MouseIcon=this.parent.cursorfile
			endif
		endif	
		
	ENDPROC

	PROCEDURE checker.mousewaitover
		if thisform.showtips and !empty(this.parent.tooltiptext)
			thisform.tooltiplabel.show(this.parent.tooltiptext)
		endif	
	ENDPROC

	PROCEDURE checker.onmouseout
		if this.enabled and this.parent.hot
			this.parent.cmdlabel.forecolor=this.parent.forecolor
			this.parent.cmdlabel.FontUnderline=this.parent.hotunderline > 1 
			if !empty(this.parent.cursorfile) and file(this.parent.cursorfile)
				this.mousepointer=1
			endif
		endif	
		if thisform.tooltiplabel.visible
			thisform.tooltiplabel.hide()
		endif	
	ENDPROC

ENDDEFINE

DEFINE CLASS xplabel AS label 		&& Label with xp look
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BackStyle = 0
	Caption = "Label1"
	FontName = "Tahoma"
	Height = 16
	Name = "xplabel"
	Width = 37

ENDDEFINE

DEFINE CLASS xpoptiongroup AS container 		&& OptionGroup with an XP look, you must add xpRadioButtons manually
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Xpradiobutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xpradiobutton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Controlsourceholder" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: enabled_assign
		*m: onchange
		*m: readonly_assign
		*m: tooltiptext_assign
		*m: value_assign
		*p: controlsource		&& Specifies the source of data to which an object is bound.
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	controlsource = 		&& Specifies the source of data to which an object is bound.
	Height = 88
	Name = "xpoptiongroup"
	tooltiptext = 		&& Specifies the text that appears as a ToolTip for a control.
	value = 0		&& Specifies the current state of a control.
	Width = 124

	ADD OBJECT 'Controlsourceholder' AS controlsourceholder WITH ;
		Left = 12, ;
		Name = "Controlsourceholder", ;
		TabStop = .F., ;
		Top = -50, ;
		Value = 0
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Xpradiobutton1' AS xpradiobutton WITH ;
		caption = , ;
		Left = 0, ;
		Name = "Xpradiobutton1", ;
		Top = 1, ;
		background.Name = "background", ;
		invisiblebutton.Name = "invisiblebutton", ;
		radiolabel.Name = "radiolabel", ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		internalring.Name = "internalring", ;
		externalring.Name = "externalring", ;
		checkmark.Name = "checkmark", ;
		checker.ISMOUSEOUT.Name = "ISMOUSEOUT", ;
		checker.Name = "checker"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'Xpradiobutton2' AS xpradiobutton WITH ;
		caption = , ;
		Left = 0, ;
		Name = "Xpradiobutton2", ;
		Top = 25, ;
		background.Name = "background", ;
		invisiblebutton.Name = "invisiblebutton", ;
		radiolabel.Name = "radiolabel", ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		internalring.Name = "internalring", ;
		externalring.Name = "externalring", ;
		checkmark.Name = "checkmark", ;
		checker.ISMOUSEOUT.Name = "ISMOUSEOUT", ;
		checker.Name = "checker"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />
	
	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		FOR i = 1 TO This.ControlCount
			if this.controls[i]<>this.ControlsourceHolder
				this.controls[i].enabled=m.vNewVal
			endif	
		ENDFOR
		
	ENDPROC

	PROCEDURE Init
		*!*	if type("thisform.ismouseout")<>"O"
		*!*		cLib=this.classlibrary
		*!*		SET CLASSLIB TO &cLib ADDI
		*!*		thisform.addobject("ismouseout","ismouseout")
		*!*		CLEAR CLASSLIB &cLib
		*!*	endif
		if type("thisform.tooltiplabel")<>"O"
			cLib=this.classlibrary
			SET CLASSLIB TO &cLib ADDI
			thisform.addobject("tooltiplabel","tooltiplabel")
			CLEAR CLASSLIB &cLib
		endif
		ii=1
		FOR i = 1 TO This.ControlCount
			if this.controls[i]<>this.ControlsourceHolder
				this.controls[i].id=ii
				ii=ii+1
			endif	
		ENDFOR
		this.readonly=this.readonly
		this.enabled=this.enabled
		if empty(this.controlsource)
			this.value=this.value
		endif	
		if !empty(this.tooltiptext)
			this.tooltiptext=this.tooltiptext
		endif	
	ENDPROC

	PROCEDURE onchange
	ENDPROC

	HIDDEN PROCEDURE readonly_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.readonly = m.vNewVal
		FOR i = 1 TO This.ControlCount
			if this.controls[i]<>this.ControlsourceHolder
				this.controls[i].readonly=m.vNewVal
			endif	
		ENDFOR
		
	ENDPROC

	HIDDEN PROCEDURE tooltiptext_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.tooltiptext = m.vNewVal
		FOR i = 1 TO This.ControlCount
			this.controls[i].tooltiptext=m.vNewVal
		ENDFOR
		
	ENDPROC

	HIDDEN PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		LOCAL i
		FOR i = 1 TO This.ControlCount
			if this.controls[i]<>this.ControlsourceHolder
				IF this.controls[i].ID=vNewVal
					this.controls[i].value=.T.
				ELSE
					this.controls[i].value=.F.
				ENDIF	
			endif
		ENDFOR
		THIS.value = m.vNewVal
		if this.controlsourceholder.value<>this.value
			this.controlsourceholder.value=this.value
		endif
		this.OnChange()
	ENDPROC

ENDDEFINE

DEFINE CLASS xpradiobutton AS container 		&& RadioButton to manually insert in an xpOptionGroup
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="background" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Invisiblebutton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="radiolabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="internalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="externalring" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CheckMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checker" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: enabled_assign
		*m: readonly_assign
		*m: value_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: id
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	PROTECTED RemoveObject
	BackColor = 255,255,255
	BackStyle = 0
	BorderWidth = 0
	caption = XP - checkbox label		&& Specifies the text displayed in an object's caption.
	Height = 17
	id = 0
	Name = "xpradiobutton"
	tooltiptext = 		&& Specifies the text that appears as a ToolTip for a control.
	Width = 108

	ADD OBJECT 'background' AS shape WITH ;
		BackColor = 255,255,255, ;
		BorderColor = 0,0,64, ;
		BorderWidth = 0, ;
		Curvature = 90, ;
		Height = 16, ;
		Left = 1, ;
		Name = "background", ;
		Top = 1, ;
		Width = 16
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'checker' AS invisiblecontainer WITH ;
		Height = 16, ;
		Left = 1, ;
		Name = "checker", ;
		Top = 1, ;
		Width = 105, ;
		ISMOUSEOUT.Name = "ISMOUSEOUT"
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'CheckMark' AS shape WITH ;
		BackColor = 0,64,0, ;
		BorderColor = 0,0,64, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		Curvature = 90, ;
		Height = 9, ;
		Left = 5, ;
		Name = "CheckMark", ;
		Top = 5, ;
		Visible = .F., ;
		Width = 9
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'externalring' AS shape WITH ;
		BackColor = 192,192,192, ;
		BackStyle = 0, ;
		BorderColor = 0,0,64, ;
		Curvature = 90, ;
		Height = 16, ;
		Left = 1, ;
		Name = "externalring", ;
		Top = 1, ;
		Width = 16
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'internalring' AS shape WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 0, ;
		BorderColor = 255,185,121, ;
		BorderWidth = 1, ;
		Curvature = 90, ;
		Height = 14, ;
		Left = 2, ;
		Name = "internalring", ;
		Top = 2, ;
		Visible = .F., ;
		Width = 14
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Invisiblebutton' AS invisiblebutton WITH ;
		Height = 16, ;
		Left = 21, ;
		Name = "Invisiblebutton", ;
		Top = 1, ;
		Width = 83
		*< END OBJECT: ClassLib="xpcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Line1' AS line WITH ;
		BorderColor = 208,208,208, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 7, ;
		Name = "Line1", ;
		Top = 2, ;
		Width = 3
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		BorderColor = 216,216,216, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 6, ;
		Name = "Line2", ;
		Top = 3, ;
		Width = 6
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line3' AS line WITH ;
		BorderColor = 224,224,224, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 5, ;
		Name = "Line3", ;
		Top = 4, ;
		Width = 8
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line4' AS line WITH ;
		BorderColor = 232,232,232, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 5, ;
		Name = "Line4", ;
		Top = 5, ;
		Width = 6
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line5' AS line WITH ;
		BorderColor = 240,240,240, ;
		BorderWidth = 1, ;
		Height = 0, ;
		Left = 4, ;
		Name = "Line5", ;
		Top = 6, ;
		Width = 4
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'radiolabel' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "XP - radio label", ;
		FontName = "Tahoma", ;
		Height = 16, ;
		Left = 23, ;
		Name = "radiolabel", ;
		Top = 1, ;
		Width = 82
		*< END OBJECT: BaseClass="label" />
	
	HIDDEN PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		WITH this
			.caption = m.vNewVal
			.radiolabel.caption=m.vNewVal
			.radiolabel.visible=.t.
			.width=.radiolabel.width+.radiolabel.left+2
			.invisibleButton.width=.radiolabel.width+2
			.checker.width=.width
		ENDWITH
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Enabled = m.vNewVal
		with this
			.invisiblebutton.enabled=.enabled
			.checker.enabled=.enabled
			.radiolabel.forecolor=iif(.enabled,rgb(0,0,0),rgb(161,161,146))
			.externalring.bordercolor=iif(.enabled and !.readonly,rgb(0,0,64),rgb(161,161,146))
			.checkmark.backcolor=iif(.enabled,rgb(0,128,0),rgb(161,161,146))
		endwith
	ENDPROC

	PROCEDURE Init
		this.caption=this.caption
		this.enabled=this.enabled
	ENDPROC

	HIDDEN PROCEDURE readonly_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.readonly = m.vNewVal
		with this
			.externalring.bordercolor=iif(.enabled and !.readonly,rgb(0,0,64),rgb(161,161,146))
		endwith
	ENDPROC

	HIDDEN PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		this.checkMark.visible=vNewVal
		THIS.value = vNewVal
	ENDPROC

	PROCEDURE checker.Click
		with this.parent
			IF  !.readonly
				.value=!.value
				.checkMark.visible=.value
				.parent.value=this.parent.id
			ENDIF
		endwith	
	ENDPROC

	PROCEDURE checker.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled and !this.parent.readonly
			this.parent.externalring.backstyle=1
		endif	
	ENDPROC

	PROCEDURE checker.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if this.enabled
			this.checkforme(500)
			IF  !this.parent.readonly
				this.parent.invisiblebutton.setfocus()
			ENDIF	
		endif	
		
	ENDPROC

	PROCEDURE checker.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.parent.externalring.backstyle=0
	ENDPROC

	PROCEDURE checker.mousewaitover
		if thisform.showtips and !empty(this.parent.tooltiptext)
			thisform.tooltiplabel.show(this.parent.tooltiptext)
		endif	
	ENDPROC

	PROCEDURE checker.onmouseout
		if !this.parent.invisiblebutton.havefocus and this.enabled and !this.parent.readonly
			this.parent.internalRing.visible=.f.
		endif	
		if thisform.tooltiplabel.visible
			thisform.tooltiplabel.hide()
		endif	
	ENDPROC

	PROCEDURE CheckMark.Init
		this.visible=this.parent.value
		
	ENDPROC

	PROCEDURE Invisiblebutton.GotFocus
		IF  !this.parent.readonly
			this.parent.internalring.visible=.t.
			dodefault()
		ENDIF	
	ENDPROC

	PROCEDURE Invisiblebutton.LostFocus
		this.parent.internalring.visible=.f.
		dodefault()
	ENDPROC

	PROCEDURE Invisiblebutton.Valid
		this.parent.checker.click()
	ENDPROC

	PROCEDURE Invisiblebutton.When
		return !this.parent.readonly
	ENDPROC

ENDDEFINE

DEFINE CLASS xptextbox AS textbox 		&& TextBox with an XP look
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderColor = 127,157,185
	DisabledBackColor = 235,235,228
	DisabledForeColor = 161,161,146
	FontName = "Tahoma"
	Height = 23
	Name = "xptextbox"
	SpecialEffect = 1
	Width = 100

ENDDEFINE
